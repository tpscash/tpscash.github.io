<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Shuangxi Outing]]></title>
      <url>/2017/07/23/shuangxi-outing/</url>
      <content type="html"><![CDATA[<p>We just had a fun team outing to Shuangxi this weekend. We enjoyed drifting on Saturday and it was a quite wonderful experience. </p>
<p>There are kayaks and bamboo rafts in Shuangxi Rafting, while the former is exciting and is for two people and wooden paddles are used to drift you through the energetic waves, the latter is more relaxing. After rafting you can even take an ox cart among bamboo forests which is most certainly a different pace to raft.</p>
<a id="more"></a>
<p>Although the weather was quite hot (41 degree), but we really enjoyed the trip!</p>
<p><img src="/images/posts/shuangxi_outing/all_team.jpeg" alt="Cash and GUI"></p>
<p><img src="/images/posts/shuangxi_outing/cash_team.jpeg" alt="Cash2"></p>
<p><img src="/images/posts/shuangxi_outing/cash_team_2.jpeg" alt="Cash2"></p>
<p><img src="/images/posts/shuangxi_outing/boats.jpeg" alt="Boat"></p>
<p><img src="/images/posts/shuangxi_outing/gui_team.jpeg" alt="GUI"></p>
<p><img src="/images/posts/shuangxi_outing/beer.jpeg" alt="Beer"></p>
<p><img src="/images/posts/shuangxi_outing/crayfish.jpeg" alt="Crayfish"></p>
<p><img src="/images/posts/shuangxi_outing/night_snack.jpeg" alt="Snack"></p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> outing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Check DB Connection Count for Processes on Linux]]></title>
      <url>/2017/06/29/check-connection-count/</url>
      <content type="html"><![CDATA[<p>Do you know how many DB connections does your process obtain? How to locate the culprit process if your database server reaches its max connections limit unexpectly? It is easy to find it out on Linux just by a few commands</p>
<a id="more"></a>
<h2 id="Get-Total-Connection-Count-for-All-Processes"><a href="#Get-Total-Connection-Count-for-All-Processes" class="headerlink" title="Get Total Connection Count for All Processes"></a>Get Total Connection Count for All Processes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq -c | awk &apos;&#123;s+=$1&#125; END &#123;print s&#125;&apos;</div></pre></td></tr></table></figure>
<h2 id="List-All-Processes-Connect-to-Database"><a href="#List-All-Processes-Connect-to-Database" class="headerlink" title="List All Processes Connect to Database"></a>List All Processes Connect to Database</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq | xargs ps wwp</div></pre></td></tr></table></figure>
<h2 id="List-Connection-Count-for-Each-Process"><a href="#List-Connection-Count-for-Each-Process" class="headerlink" title="List Connection Count for Each Process"></a>List Connection Count for Each Process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paste -d &apos;:&apos; &lt;(netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq -c | awk &apos;&#123;print $1&#125;&apos;) &lt;(netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq | xargs ps --no-headers wwp)</div></pre></td></tr></table></figure>
<h2 id="List-Connection-Count-for-Each-Process-Simplified"><a href="#List-Connection-Count-for-Each-Process-Simplified" class="headerlink" title="List Connection Count for Each Process (Simplified)"></a>List Connection Count for Each Process (Simplified)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paste  &lt;(netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq -c | awk &apos;BEGIN &#123;print &quot;COUNT&quot;&#125; &#123;printf &quot;%5s\n&quot;, $1&#125;&apos;) &lt;(netstat -ap | grep [database_host] | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;/&apos; &apos;&#123;print $1&#125;&apos; | grep -v &apos;-&apos; | sort -n | uniq | xargs ps wwp |  awk &apos;&#123;printf &quot;%-8s&quot;, $1; print $NF&#125;&apos;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSL Handshake Failure after Upgrading to JDK 8]]></title>
      <url>/2017/06/29/ssl-handshake-failure-jdk8/</url>
      <content type="html"><![CDATA[<p>This post is for tracking the process to solve a SSL issue after JDK 8 upgrade.</p>
<a id="more"></a>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>We have a component which is using PKCS12 key store as the SSL identify when connecting to an external EMS instance, code like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;bean name=&quot;jndiTemplate&quot; class=&quot;org.springframework.jndi.JndiTemplate&quot;&gt;</div><div class="line">   &lt;property name=&quot;environment&quot;&gt;</div><div class="line">       &lt;props&gt;</div><div class="line">           &lt;prop key=&quot;java.naming.factory.initial&quot;&gt;com.tibco.tibjms.naming.TibjmsInitialContextFactory&lt;/prop&gt;</div><div class="line">           &lt;prop key=&quot;java.naming.provider.url&quot;&gt;$&#123;ems_ssl_url&#125;&lt;/prop&gt;</div><div class="line">           &lt;prop key=&quot;com.tibco.tibjms.naming.ssl_identity&quot;&gt;$&#123;path_to_the_p12_file&#125;&lt;/prop&gt;</div><div class="line">           &lt;prop key=&quot;com.tibco.tibjms.naming.ssl_password&quot;&gt;$&#123;ssl_password&#125;&lt;/prop&gt;</div><div class="line">           &lt;prop key=&quot;com.tibco.tibjms.naming.security_protocol&quot;&gt;ssl&lt;/prop&gt;</div><div class="line">           &lt;!--&lt;prop key=&quot;com.tibco.tibjms.naming.ssl_cipher_suites&quot;&gt;RC4-MD5&lt;/prop&gt;--&gt;</div><div class="line">           &lt;prop key=&quot;com.tibco.tibjms.naming.ssl_enable_verify_host&quot;&gt;false&lt;/prop&gt;</div><div class="line">           &lt;prop key=&quot;com.tibco.tibjms.naming.ssl_enable_verify_hostname&quot;&gt;false&lt;/prop&gt;</div><div class="line">      &lt;/props&gt;</div><div class="line">   &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>This EMS connection stopped working after we upgraded to JDK 8, error in the log:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.jms.JMSSecurityException: Failed to connect to any server at: ssl://xxxx [Error: Failed to connect via SSL to [ssl://xxxx]: Received fatal alert: handshake_failure: url that returned this exception = SSL://xxxx ]</div></pre></td></tr></table></figure>
<h2 id="Solving-the-Issue"><a href="#Solving-the-Issue" class="headerlink" title="Solving the Issue"></a>Solving the Issue</h2><h3 id="Get-More-Intel"><a href="#Get-More-Intel" class="headerlink" title="Get More Intel"></a>Get More Intel</h3><p>It was handshake failure while building the SSL connection, so I enabled debugging on the SSL connection by -Djavax.net.debug=ssl and it gave me:</p>
<p>*** ClientHello, TLSv1</p>
<p>RandomCookie:  GMT: 1498746256 bytes = { 236, 170, 65, 179, 185, 201, 110, 99, 17, 112, 13, 59, 2, 67, 217, 159, 2, 1, 83, 70, 37, 196, 220, 130, 16, 124, 243, 89 }</p>
<p>Session ID:  {}</p>
<p>Cipher Suites: [TLS_RSA_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_NULL_MD5, SSL_RSA_WITH_NULL_SHA]</p>
<p>Compression Methods:  { 0 }</p>
<p>Extension server_name, server_name: [type=host_name (0), value=xxxx]</p>
<p>Extension renegotiation_info, renegotiated_connection: <empty></empty></p>
<p>***</p>
<p>main, WRITE: TLSv1 Handshake, length = 105</p>
<p>main, READ: TLSv1 Alert, length = 2</p>
<p>main, RECV TLSv1.2 ALERT:  fatal, handshake_failure</p>
<h3 id="Possible-Reasons"><a href="#Possible-Reasons" class="headerlink" title="Possible Reasons"></a>Possible Reasons</h3><p>The handshake failure could have occurred due to various reasons:</p>
<ul>
<li><p>Incompatible cipher suites in use by the client and the server. This would require the client to use (or enable) a cipher suite that is supported by the server.</p>
</li>
<li><p>Incompatible versions of SSL in use (the server might accept only TLS v1, while the client is capable of only using SSL v3). Again, the client might have to ensure that it uses a compatible version of the SSL/TLS protocol.</p>
</li>
<li><p>Incomplete trust path for the server certificate; the server’s certificate is probably not trusted by the client. This would usually result in a more verbose error, but it is quite possible. Usually the fix is to import the server’s CA certificate into the client’s trust store.</p>
</li>
<li><p>The certificate is issued for a different domain. Again, this would have resulted in a more verbose message, but I’ll state the fix here in case this is the cause. The resolution in this case would be get the server (it does not appear to be yours) to use the correct certificate</p>
</li>
</ul>
<h3 id="Suspect-and-Experiment"><a href="#Suspect-and-Experiment" class="headerlink" title="Suspect and Experiment"></a>Suspect and Experiment</h3><p>I doubt this is very likely the cipher issue as I encountered before, so I tested the remote EMS server by:</p>
<p>openssl s_client -tls1 -connect xxxx</p>
<p>The test returned successfully but I saw below from the output:</p>
<p>New, TLSv1/SSLv3, Cipher is RC4-MD5<br>Server public key is 2048 bit<br>Secure Renegotiation IS supported<br>Compression: NONE<br>Expansion: NONE<br>SSL-Session:<br>    Protocol  : TLSv1<br>    Cipher    : RC4-MD5</p>
<h3 id="Research-and-Confirm"><a href="#Research-and-Confirm" class="headerlink" title="Research and Confirm"></a>Research and Confirm</h3><p>The EMS server is using RC4 ciphers, after google it, no surprise that RC4 had been disabled since JDK 8u51 update:</p>
<p><a href="http://www.oracle.com/technetwork/java/javase/8u51-relnotes-2587590.html" target="_blank" rel="external">Java™ SE Development Kit 8, Update 51 Release Notes</a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RC4 is now considered as a weak cipher. Servers should not select RC4 unless there is no other stronger candidate in the client requested cipher suites. A new security property, jdk.tls.legacyAlgorithms, is added to define the legacy algorithms in Oracle JSSE implementation. RC4 related algorithms are added to the legacy algorithms list.</div><div class="line"> </div><div class="line"> </div><div class="line">JDK-8043201 (not public)</div><div class="line"> </div><div class="line"> </div><div class="line">Area: security-libs/javax.net.ssl</div><div class="line">Synopsis: Prohibit RC4 cipher suites</div><div class="line"> </div><div class="line"> </div><div class="line">RC4 is now considered as a compromised cipher. RC4 cipher suites have been removed from both client and server default enabled cipher suite list in Oracle JSSE implementation. These cipher suites can still be enabled by SSLEngine.setEnabledCipherSuites() and SSLSocket.setEnabledCipherSuites() methods</div></pre></td></tr></table></figure>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>It is possible that to enable RC4 again by removing RC4 from JDK disabled algorithms list defined in $JAVA_HOME/jre/lib/security/java.security file or pragmatically enabling them using </p>
<p>Security.setProperty(“jdk.tls.disabledAlgorithms”, “” /*disabledAlgorithms*/ );</p>
<p>But by Security.setProperty(), it is not reliable because the fields which hold disabled algorithms are static and final, So if that class gets loaded first you don’t have control over it, you could alternatively try by creating a properties file like this</p>
<p>## override it to remove RC4, in disabledcipher.properties</p>
<p>jdk.tls.disabledAlgorithms=DHE</p>
<p>and in your JVM, you could refer it as system property like this</p>
<p>java -Djava.security.properties=[path_to_the_disabledcipher.properties_file]</p>
<p>However better solution would be to update the EMS server configuration to upgrade to stronger Ciphers, but since the EMS instance is not owned by us, so we have to go hack it this way.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
            <tag> ssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Discover the Mystery of Metaspace]]></title>
      <url>/2017/06/23/discover-the-mystery-of-metaspace/</url>
      <content type="html"><![CDATA[<p>The JDK 8 HotSpot JVM is now using native memory for the representation of class metadata and is called Metaspace</p>
<a id="more"></a>
<h2 id="What-is-Metaspace"><a href="#What-is-Metaspace" class="headerlink" title="What is Metaspace"></a>What is Metaspace</h2><p>Metaspace is nothing but a replacement of our old friend PermGen (Permanent Generation) space. The main difference between PermGen and Metaspace is that Metaspace by default auto increases its size while PermGen always has a fixed maximum size. You can set a fixed maximum for Metaspace with JVM parameters, but you can’t make PermGen auto increase. By default class metadata allocation is limited by the amount of available native memory (capacity will of course depend if you use a 32-bit JVM vs. 64-bit along with OS virtual memory availability). The main purpose of Metaspace is to reduce the OOM error caused by PermGen is exhausted (although the removal of PermGen doesn’t mean that your class loader leak issues are gone).</p>
<h2 id="What-is-Metaspace-Composed-of"><a href="#What-is-Metaspace-Composed-of" class="headerlink" title="What is Metaspace Composed of"></a>What is Metaspace Composed of</h2><p>If <code>UseCompressedOops</code> is turned on and <code>UseCompressedClassesPointers</code> is used, then two logically different areas of native memory are used for class metadata - <code>Klass Metaspace</code> &amp; <code>NoKlass Metaspace</code>. UseCompressedClassPointers uses a 32-bit offset to represent the class pointer in a 64-bit process as does UseCompressedOops for Java object references. A region (Klass Metaspace) is allocated for these compressed class pointers (the 32-bit offsets). The size of the region can be set with <code>CompressedClassSpaceSize</code> and is 1 gigabyte (GB) by default and it is just adjacent to the heap. The space for the compressed class pointers is reserved as space allocated by <code>mmap</code> at initialization and committed as needed. The <code>MaxMetaspaceSize</code> applies to the sum of the committed compressed class space and the space for the other class metadata (NoKlass Metaspace). If UseCompressedOops &amp; UseCompressedClassesPointers are turned off or <code>-Xmx</code> is set to greater than 32G, the Klass Metaspace will not exist, all Klass will be nested in NoKlass Metaspace in this case.</p>
<p>Java Hotspot VM explicitly manages the space used for metadata. Space is requested from the OS and then divided into chunks (can be discontiguous chunks). A class loader allocates space for metadata from its chunks (a chunk is bound to a specific class loader). When classes are unloaded for a class loader, its chunks are recycled for reuse or returned to the OS. Metadata uses space allocated by <code>mmap</code>, not by <code>malloc</code>. Klass Metaspace &amp; NoKlass Metaspace are shared by all class loaders.</p>
<h2 id="Metaspace-Tuning"><a href="#Metaspace-Tuning" class="headerlink" title="Metaspace Tuning"></a>Metaspace Tuning</h2><p>Class metadata is deallocated when the corresponding Java class is unloaded. Java classes are unloaded as a result of garbage collection, and garbage collections may be induced in order to unload classes and deallocate class metadata. When the space committed for class metadata reaches a certain level (a high-water mark), a garbage collection is induced. After the garbage collection, the high-water mark may be raised or lowered depending on the amount of space freed from class metadata. The high-water mark would be raised so as not to induce another garbage collection too soon. The high-water mark is <strong>initially</strong> set to the value of the command-line option <code>MetaspaceSize</code>. <strong>It is raised or lowered based on the options MaxMetaspaceFreeRatio and MinMetaspaceFreeRatio</strong>. If the committed space available for class metadata as a percentage of the total committed space for class metadata is greater than <code>MaxMetaspaceFreeRatio</code>, then the high-water mark will be lowered. If it is less than <code>MinMetaspaceFreeRatio</code>, then the high-water mark will be raised</p>
<p>Specify a higher value for the option <code>MetaspaceSize</code> to avoid early garbage collections induced for class metadata. The amount of class metadata allocated for an application is application-dependent and general guidelines do not exist for the selection of MetaspaceSize. The default size of MetaspaceSize is platform-dependent and ranges from 12 MB to about 20 MB.</p>
<p>Besides all the parameters mentioned above, there are also several other parameters to change Metaspace behaviors, below list includes them all together:</p>
<ul>
<li>UseLargePagesInMetaspace</li>
<li>InitialBootClassLoaderMetaspace</li>
<li>MetaspaceSize</li>
<li>MaxMetaSpaceSize</li>
<li>CompressClassSpaceSize</li>
<li>MinMetaspaceExpansion</li>
<li>MaxMetaspaceExpansion</li>
<li>MinMetaspaceFreeRatio</li>
<li>MaxMetaspaceFreeRatio</li>
</ul>
<h3 id="UseLargePagesInMetaspace"><a href="#UseLargePagesInMetaspace" class="headerlink" title="UseLargePagesInMetaspace"></a>UseLargePagesInMetaspace</h3><p>By default its value is false. This parameter specify if use LargePage in Metaspace. Generally the page size is 4KB. This parameter takes effect only if <code>UseLargePages</code> is turned on, but usually it is turned off.</p>
<h3 id="InitialBootClassLoaderMetaspaceSize"><a href="#InitialBootClassLoaderMetaspaceSize" class="headerlink" title="InitialBootClassLoaderMetaspaceSize"></a>InitialBootClassLoaderMetaspaceSize</h3><p>By default its value is 4M in 64-bit JVM and 2200K in 32-bit JVM. This parameter indicates the size of the first block of NoKlass Metaspace - 2 * InitialBootClassLoaderMetaspaceSize, meanwhile it indicates the size of the first chunk of bootstrapClassLoader.</p>
<h3 id="MetaspaceSize"><a href="#MetaspaceSize" class="headerlink" title="MetaspaceSize"></a>MetaspaceSize</h3><p>By default its value is about 20M (~20.8M). It is the initial threshold (also the minimum threshold) of Metaspace GC.</p>
<h3 id="MaxMetaspaceSize"><a href="#MaxMetaspaceSize" class="headerlink" title="MaxMetaspaceSize"></a>MaxMetaspaceSize</h3><p>By default it’s unlimited. It is recommended to set value for this parameter to avoid memory leak exhausted all the OS memory.</p>
<h3 id="CompressedClassSpaceSize"><a href="#CompressedClassSpaceSize" class="headerlink" title="CompressedClassSpaceSize"></a>CompressedClassSpaceSize</h3><p>By default its value is 1g. It is the size of Klass Metaspace. It only takes effect when <code>UseCompressedOops</code> &amp; <code>UseCompressedClassesPointers</code> are turned on and <code>-Xmx</code> doesn’t exceed 32G</p>
<h3 id="MinMetaspaceExpansion"><a href="#MinMetaspaceExpansion" class="headerlink" title="MinMetaspaceExpansion"></a>MinMetaspaceExpansion</h3><p>Is it the minimum size to expand when Metaspace is not enough (as its name implies)? No…</p>
<p>It is the minimum requirement on the incremental size when increasing the threshold of Metaspace GC. By default its value is 332.8K.</p>
<h3 id="MaxMetaspaceExpansion"><a href="#MaxMetaspaceExpansion" class="headerlink" title="MaxMetaspaceExpansion"></a>MaxMetaspaceExpansion</h3><p>By default its value is 5.2M. It is the maximum requirement on the incremental size when increasing the threshold of Metaspace GC. If the incremental size exceeds MinMetaspaceExpansion but less than MaxMetaspaceExpansion, then the incremental size is MaxMetaspaceExpansion. If the incremental size exceeds MaxMetaspaceExpansion, then the incremental size is MinMetaspaceExpansion + original incremental size</p>
<h3 id="MinMetaspaceFreeRatio"><a href="#MinMetaspaceFreeRatio" class="headerlink" title="MinMetaspaceFreeRatio"></a>MinMetaspaceFreeRatio</h3><p>By default its value is 40. After a GC activity, If the committed space available for class metadata as a percentage of the total committed space for class metadata is less than MinMetaspaceFreeRatio, then the threshold of Metaspace GC will be raised, but the incremental size of the threshold must meets the requirement by MinMetaspaceExpansion, otherwise the threshold will not be raised.</p>
<h3 id="MaxMetaspaceFreeRatio"><a href="#MaxMetaspaceFreeRatio" class="headerlink" title="MaxMetaspaceFreeRatio"></a>MaxMetaspaceFreeRatio</h3><p>By default its value n 70. The effect of this parameter is the opposite to the MinMetaspaceFreeRatio.</p>
<h2 id="Tools-to-Check-Metaspace"><a href="#Tools-to-Check-Metaspace" class="headerlink" title="Tools to Check Metaspace"></a>Tools to Check Metaspace</h2><p>We can use <code>jstat</code> to check the Metaspace of a JVM process:</p>
<p><code>jstat -gc &lt;pid&gt;</code></p>
<p>Meaning of the output:</p>
<h3 id="MC"><a href="#MC" class="headerlink" title="MC"></a>MC</h3><p>It is total committed size of Klass Metaspace &amp; NoKlass Metaspace (it is committed size although the name is interpreted to capacity). Unit is KB.</p>
<h3 id="MU"><a href="#MU" class="headerlink" title="MU"></a>MU</h3><p>It is used size of Klass Metaspace &amp; NoKlass Metaspace. Unit is KB.</p>
<h3 id="CCSC"><a href="#CCSC" class="headerlink" title="CCSC"></a>CCSC</h3><p>It is the committed size of Klass Metaspace. Unit is KB.</p>
<h3 id="CCSU"><a href="#CCSU" class="headerlink" title="CCSU"></a>CCSU</h3><p>It is the used size of Klass Metaspace.</p>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>It is the total usage of Klass Metaspace &amp; NoKlass Metaspace - (CCSU + MU) / (CCSC + MC).</p>
<h3 id="CCS"><a href="#CCS" class="headerlink" title="CCS"></a>CCS</h3><p>It is the usage of NoKlass Metaspace - CCSU / CCSC.</p>
<h3 id="MCMX"><a href="#MCMX" class="headerlink" title="MCMX"></a>MCMX</h3><p>It is total reserved size of Klass Metaspace &amp; NoKlass Metaspace. By default, Klass Metaspace reserves 1g of memory and NoKlass Metaspace reserves 2 * InitialClassLoaderMetaspaceSize of memory.</p>
<h3 id="CCSMX"><a href="#CCSMX" class="headerlink" title="CCSMX"></a>CCSMX</h3><p>It is the reserved size of Klass Metaspace.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ENTRYPOINT vs. CMD in Dockerfile]]></title>
      <url>/2017/04/16/entrypoint-vs-cmd/</url>
      <content type="html"><![CDATA[<p>Both ENTRYPOINT and CMD allow you to specify the startup command for an image, but there are subtle differences between them. There are many times where you’ll want to choose one or the other, but they can also be used together. We’ll explore the similarity and difference of the two instructions in below section.</p>
<a id="more"></a>
<h2 id="Similarities"><a href="#Similarities" class="headerlink" title="Similarities"></a>Similarities</h2><ul>
<li><p>Both the ENTRYPOINT and CMD instructions support two different forms: the shell form and the exec form</p>
<ul>
<li><p>When using the shell form, the specified binary is executed with an invocation of the shell using <code>/bin/sh -c</code></p>
</li>
<li><p>When the exec form is used the command will be executed without a shell. This means that normal shell processing does not happen e.g it will not do variable substitution</p>
</li>
<li><p>The exec form is preferred form for both of the two instructions.</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>The ENTRYPOINT or CMD that you specify in your Dockerfile identify the default executable for your image. However, the user has the option to override either of these values at run time</p>
<ul>
<li><p>We can override the default CMD by specifying an argument after the image name when starting the container: <code>docker run &lt;image name&gt; commands</code></p>
</li>
<li><p>The default ENTRYPOINT can be similarly overridden but it requires the use of the <code>--entrypoint</code> flag</p>
</li>
</ul>
</li>
<li><p>When multiple ENTRYPOINT or CMD specified in a Dockerfile, only the last one will take effect respectively</p>
</li>
</ul>
<h2 id="Differences"><a href="#Differences" class="headerlink" title="Differences"></a>Differences</h2><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><ul>
<li><p>ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters</p>
</li>
<li><p>ENTRYPOINT should be used in scenarios where you want the container to behave exclusively as if it were the executable it’s wrapping. That is, when you don’t want or expect the user to override the executable you’ve specified</p>
</li>
<li><p>In an exec form ENTRYPOINT, command line arguments to <code>docker run &lt;image&gt;</code> will be appended after all elements, and will override all elements specified using CMD</p>
</li>
<li><p>The shell form prevents any CMD or run command line arguments from being used</p>
</li>
<li><p>The disadvantage of the shell form is that your ENTRYPOINT will be started as a subcommand of <code>/bin/sh -c</code>, which does not pass signals. This means that the executable will not be the container’s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from <code>docker stop &lt;container&gt;</code>. However, you can use <code>exec</code> before your binary in the shell form to make the executable be the container’s PID 1</p>
</li>
</ul>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><ul>
<li><p>CMD instruction allows you to set a default command, which will be executed only when you run container without specifying a command</p>
</li>
<li><p>If the user specifies arguments to docker run then they will override the default command specified in CMD</p>
</li>
<li><p>CMD has another form: <code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (as default parameters to ENTRYPOINT), which is used with ENTRYPOINT together </p>
</li>
<li><p>If CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and ENTRYPOINT instructions should be specified with the JSON array format</p>
</li>
</ul>
<h2 id="Use-ENTRYPOINT-and-CMD-Together"><a href="#Use-ENTRYPOINT-and-CMD-Together" class="headerlink" title="Use ENTRYPOINT and CMD Together"></a>Use ENTRYPOINT and CMD Together</h2><p>Combining ENTRYPOINT and CMD allows you to specify the default executable for your image while also providing default arguments to that executable which may be overridden by the user</p>
<p>Both CMD and ENTRYPOINT instructions define what command gets executed when running a container. There are few rules that describe their co-operation. The table below shows what command is executed for different ENTRYPOINT / CMD combinations:</p>
<table>
<thead>
<tr>
<th></th>
<th>No ENTRYPOINT</th>
<th>ENTRYPOINT exec_entry p1_entry</th>
<th>ENTRYPOINT [“exec_entry”, “p1_entry”]</th>
</tr>
</thead>
<tbody>
<tr>
<td>No CMD</td>
<td>error, not allowed</td>
<td>/bin/sh -c exec_entry p1_entry</td>
<td>exec_entry p1_entry</td>
</tr>
<tr>
<td>CMD [“exec_cmd”, “p1_cmd”]</td>
<td>exec_cmd p1_cmd</td>
<td>/bin/sh -c exec_entry p1_entry</td>
<td>exec_entry p1_entry exec_cmd p1_cmd</td>
</tr>
<tr>
<td>CMD [“p1_cmd”, “p2_cmd”]</td>
<td>p1_cmd p2_cmd</td>
<td>/bin/sh -c exec_entry p1_entry</td>
<td>exec_entry p1_entry p1_cmd p2_cmd</td>
</tr>
<tr>
<td>CMD exec_cmd p1_cmd</td>
<td>/bin/sh -c exec_cmd p1_cmd</td>
<td>/bin/sh -c exec_entry p1_entry</td>
<td>exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd</td>
</tr>
</tbody>
</table>
<h2 id="Conclusions-and-Hints"><a href="#Conclusions-and-Hints" class="headerlink" title="Conclusions and Hints"></a>Conclusions and Hints</h2><ul>
<li><p>The main purpose of a ENTRYPOINT is to configure a container that will run as an executable</p>
</li>
<li><p>The main purpose of a CMD is to provide defaults for an executing container</p>
</li>
<li><p>Prefer ENTRYPOINT to CMD when building executable Docker image and you need a command always to be executed. Additionally use CMD if you need to provide extra default arguments that could be overwritten from command line when docker container runs</p>
</li>
<li><p>Dockerfile should specify at least one of CMD or ENTRYPOINT commands</p>
</li>
<li><p>ENTRYPOINT should be defined when using the container as an executable</p>
</li>
<li><p>CMD should be used as a way of defining default arguments for an ENTRYPOINT command or for executing an ad-hoc command in a container</p>
</li>
<li><p>CMD will be overridden when running the container with alternative arguments</p>
</li>
<li><p>If you need to write a starter script for a single executable, you can ensure that the final executable receives the Unix signals by using <code>exec</code> and <code>gosu</code> commands</p>
</li>
<li><p>The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘)</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Configure Network on CentOS]]></title>
      <url>/2017/03/12/config-network-on-centos/</url>
      <content type="html"><![CDATA[<p>If you don’t have a UI on your CentOS system, you need to configure your network via command line. Below are the steps.</p>
<p>You can check your network devices by <code>ip</code> command. Run <code>ip addr</code>, you will get output like below:</p>
<a id="more"></a>
<pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:cc:c7:57 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.219/24 brd 192.168.0.255 scope global dynamic eno16777736
       valid_lft 31826sec preferred_lft 31826sec
    inet6 fe80::20c:29ff:fecc:c757/64 scope link
       valid_lft forever preferred_lft forever
</code></pre><p>Network interface config files are located in <code>/etc/sysconfig/network-scripts/</code> directory. There are segregated files in this folder for all your network devices e.g. ifcfg-en16777736</p>
<h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p>Make sure below lines are in the config file:</p>
<pre><code>BOOTPROTO=&quot;dhcp&quot;
ONBOOT=&quot;yes&quot;
</code></pre><p>And file will look like below after changes:    </p>
<pre><code>TYPE=&quot;Ethernet&quot;
BOOTPROTO=&quot;dhcp&quot;
DEFROUTE=&quot;yes&quot;
PEERDNS=&quot;yes&quot;
PEERROUTES=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_PEERDNS=&quot;yes&quot;
IPV6_PEERROUTES=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
NAME=&quot;eno16777736&quot;
UUID=&quot;fb0f101a-6299-4179-8cd9-de054cb7b577&quot;
DEVICE=&quot;eno16777736&quot;
ONBOOT=&quot;yes&quot;
</code></pre><h2 id="Static-IP"><a href="#Static-IP" class="headerlink" title="Static IP"></a>Static IP</h2><p>Change BOOTPROTO to static</p>
<pre><code>BOOTPROTO=&quot;static&quot;
</code></pre><p>And add below lines at the end of the file</p>
<pre><code>IPADDR=192.168.1.33
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
</code></pre><p>The file will look like below after changes:</p>
<pre><code>TYPE=&quot;Ethernet&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
PEERDNS=&quot;yes&quot;
PEERROUTES=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_PEERDNS=&quot;yes&quot;
IPV6_PEERROUTES=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
NAME=&quot;eno16777736&quot;
UUID=&quot;fb0f101a-6299-4179-8cd9-de054cb7b577&quot;
DEVICE=&quot;eno16777736&quot;
ONBOOT=&quot;yes&quot;
IPADDR=192.168.1.33
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
</code></pre><p>Default gateway can be configured in <code>/etc/sysconfig/network</code></p>
<pre><code>NETWORKING=yes
HOSTNAME=centos7
GATEWAY=192.168.1.1
</code></pre><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>Add below to <code>/etc/resolv.conf</code></p>
<pre><code>nameserver 8.8.8.8 #Primary DNS
nameserver 8.8.4.4 #Secondary DNS   
</code></pre><h2 id="Hostname"><a href="#Hostname" class="headerlink" title="Hostname"></a>Hostname</h2><p>There are several ways to set up hostname</p>
<ul>
<li><p>Use hostnamectl</p>
<p>  <code>hostnamectl set-hostname centos [--pretty][--static][--transient]</code></p>
<p>  The name “centos” is persisted to <code>/etc/hostname</code></p>
</li>
<li><p>For internal networking</p>
<p>  Change the IP -&gt; hostname mapping in <code>/etc/hosts</code></p>
</li>
<li><p>Run hostname command </p>
<p>  <code>hostname centos</code></p>
<p>  Note: This is not persistent</p>
</li>
</ul>
<p>For all steps run <code>systemctl restart network</code> to let the change take effect.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Install Java 8 on CentOS]]></title>
      <url>/2016/12/10/install-jdk-on-centos/</url>
      <content type="html"><![CDATA[<p>A walking through to install JDK on CentOS.</p>
<a id="more"></a>
<h2 id="Download-JDK"><a href="#Download-JDK" class="headerlink" title="Download JDK"></a>Download JDK</h2><p>You need to agree OTN license terms before downloading the package. So if you are using <code>wget</code> or <code>curl</code>, you need to add more parameters to avoid only downloading a webpage instead of the real package.</p>
<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p><code>wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm</code></p>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p><code>curl -v -j -k -L -H &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm &gt; jdk-8u112-linux-x64.rpm</code></p>
<ul>
<li>-j -&gt; junk cookies</li>
<li>-k -&gt; ignore certificates</li>
<li>-L -&gt; follow redirects</li>
<li>-H -&gt; headers (–header)</li>
</ul>
<h2 id="Install-JDK-RPM"><a href="#Install-JDK-RPM" class="headerlink" title="Install JDK RPM"></a>Install JDK RPM</h2><p>You can install the RPM manually or use yum:</p>
<p><code>yum localinstall jdk-8u112-linux-x64.rpm -y</code></p>
<p>After it is completed, you will see below in folder /usr/java:</p>
<pre><code>jdk1.8.0_112

latest -&gt; /usr/java/jdk1.8.0_112

default -&gt; /usr/java/latest
</code></pre><h2 id="Install-Java-with-Alternatives"><a href="#Install-Java-with-Alternatives" class="headerlink" title="Install Java with Alternatives"></a>Install Java with Alternatives</h2><p>To avoid configuring Java again when you upgrade to a newer Java version, you can utilize above soft link to hide the version from configuration.</p>
<h3 id="Check-current-alternatives-environment"><a href="#Check-current-alternatives-environment" class="headerlink" title="Check current alternatives environment"></a>Check current alternatives environment</h3><p><code>alternatives --config java</code></p>
<pre><code>There is 1 program which provide &apos;java&apos;.

  Selection    Command
-----------------------------------------------
*+ 1           /opt/jdk1.7.0_71/bin/java

Enter to keep the current selection[+], or type selection number: ^C
</code></pre><h3 id="Install-new-Java-version"><a href="#Install-new-Java-version" class="headerlink" title="Install new Java version"></a>Install new Java version</h3><p>To not break existing environment we need to install Java using below alternative command:</p>
<p><code>alternatives --install /usr/bin/java java /usr/java/default/bin/java 2</code></p>
<p>Then check alternatives environment again and choose new installed Java version</p>
<p><code>alternatives --config java</code></p>
<pre><code>There are 2 programs which provide &apos;java&apos;.

  Selection    Command
-----------------------------------------------
*  1           /opt/jdk1.7.0_71/bin/java
 + 2           /usr/java/default/bin/java

Enter to keep the current selection[+], or type selection number: 2  
</code></pre><p>At this point Java 8 has been successfully installed on your system. Let’s set up javac/jar as well:</p>
<pre><code>alternatives --install /usr/bin/jar jar /usr/java/default/bin/jar 2
alternatives --install /usr/bin/javac javac /usr/java/default/bin/javac 2
alternatives --set jar /usr/java/default/bin/jar
alternatives --set javac /usr/java/default/bin/javac
</code></pre><h2 id="Check-Installed-Java-Version"><a href="#Check-Installed-Java-Version" class="headerlink" title="Check Installed Java Version"></a>Check Installed Java Version</h2><p><code>java --version</code></p>
<pre><code>java version &quot;1.8.0_112&quot;
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
</code></pre><h2 id="Configure-Environment-Variables"><a href="#Configure-Environment-Variables" class="headerlink" title="Configure Environment Variables"></a>Configure Environment Variables</h2><pre><code>export JAVA_HOME=/usr/java/default
export JRE_HOME=/usr/java/default/jre
export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin    
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[What are the Diffferences Between Double Dot and Triple Dot in Git]]></title>
      <url>/2016/11/02/what-are-the-differences-between-double-dot-and-triple-dot-in-git/</url>
      <content type="html"><![CDATA[<p>The double dot and triple dot have different meanings when use them in <code>git diff</code> and <code>git log</code>.</p>
<p>The command <code>git diff</code> typically only shows you the difference between the states of the tree between exactly two points in the commit graph.</p>
<a id="more"></a>
<p>The <code>..</code> and <code>...</code> notations in <code>git diff</code> have the following meanings:</p>
<p><img src="/images/posts/git/git-diff-help.png" alt="git diff"></p>
<p><code>git diff foo..bar</code> is exactly the same as <code>git diff foo bar</code> - both will show you the difference between the tips of the two branches foo and bar. </p>
<p>On the other hand, <code>git diff foo...bar</code> will show you the difference between the “merge base” of the two branches and the tip of bar. The “merge base” is usually the last commit in common between those two branches, so this command will show you the changes that your work on bar has introduced, while ignoring everything that has been done on foo in the mean time.</p>
<p>A common source of confusion here is that <code>..</code> and <code>...</code> mean subtly different things when used in a command such as <code>git log</code> that expects a set of commits as one or more arguments. (These commands all end up using <code>git rev-list</code> to parse a list of commits from their arguments).</p>
<p>The meaning of <code>..</code> and <code>...</code> for git log can be shown graphically as below:</p>
<p><img src="/images/posts/git/git-log-help.png" alt="git log"></p>
<p>So, <code>git rev-list foo..bar</code> shows you everything on branch bar that isn’t also on branch foo. </p>
<p>On the other hand, <code>git rev-list foo...bar</code> shows you all the commits that are in either foo or bar, but not both. </p>
<p>The third diagram just shows that if you list the two branches, you get the commits that are in either one or both of them</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Write Cucumber JVM Step Definitions]]></title>
      <url>/2016/10/20/wriete-cucumber-jvm-step-definitions/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.czeczotka.com/2014/08/17/writing-cucumber-jvm-step-definitions/" target="_blank" rel="external">Original Link</a></p>
<p>When I started working with Cucumber JVM it took a while to get the knack of how to write nice and efficient step definitions. Being a regular expression ninja certainly helps but you can get by with a few examples which will enable you to write a wide range of Cucumber steps. Below are some I found the most useful.</p>
<a id="more"></a>
<h2 id="Exact-match"><a href="#Exact-match" class="headerlink" title="Exact match"></a>Exact match</h2><p>I know it’s a no-brainer but will get you started.</p>
<pre><code>@Given(&quot;I have a cucumber step&quot;)
public void i_have_a_cucumber_step() throws Throwable {
    System.out.println(&quot;Step definition exact match&quot;);
}
</code></pre><h2 id="Use-anchors"><a href="#Use-anchors" class="headerlink" title="Use anchors"></a>Use anchors</h2><p>Remember to use anchors to mark the beginning (<code>^</code>) and end of the expression (<code>$</code>). The step definition above will match both steps below:</p>
<pre><code>Given I have a cucumber step
Given I have a cucumber step and a salad
</code></pre><p>What we really want is to match the first one and get Cucumber to give us a stub implementation of the second one. In order to avoid unexpected matches we need to add anchors:</p>
<pre><code>@Given(&quot;^I have a cucumber step$&quot;)
</code></pre><h2 id="Capture-integers-and-strings"><a href="#Capture-integers-and-strings" class="headerlink" title="Capture integers and strings"></a>Capture integers and strings</h2><pre><code>@Given(&quot;^I have (\\d+) (.*) in my basket$&quot;)
public void i_have_in_my_basket(int number, String veg) throws Throwable {
    System.out.println(format(&quot;I have {0} {1} in my basket&quot;, number, veg));
}
</code></pre><p>Let’s have a look at the step definition. By using round brackets we mark part of the expression as a capture group so that Cucumber can map it to a method parameter. In our case have the following patterns:</p>
<ul>
<li>\d+ matching at least one digit, d represents a digit, + is a quantifier and means one or more times; the expression is escaped with a backslash, because it also is the escape character in Java we need to escape it with another backslash and we end up with \d+</li>
<li>.+ matching at least one character, . (dot) represents any character</li>
</ul>
<h2 id="Use-non-capturing-groups"><a href="#Use-non-capturing-groups" class="headerlink" title="Use non-capturing groups"></a>Use non-capturing groups</h2><p>It may be useful to have a bit of flexibility and add words in the step which are not matched. This is what non-capturing groups can be used for. There is a ?: operator (question mark and colon) and if it is present at the beginning of the group it will not be mapped to method parameters.</p>
<pre><code>@Given(&quot;^I have a (?:tasty|nasty|rusty) cucumber step$&quot;)
public void i_have_a_X_cucumber_step() throws Throwable {
    System.out.println(&quot;Step definition with a non-capturing group&quot;);
}
</code></pre><p>This step definition will match three different steps to one step definition. Note that I used logical operator described below.</p>
<pre><code>Scenario: Non-capturing group      # cucumber/regex.feature:9
Given I have a tasty cucumber step # CucumberSteps.i_have_a_X_cucumber_step()
Given I have a nasty cucumber step # CucumberSteps.i_have_a_X_cucumber_step()
Given I have a rusty cucumber step # CucumberSteps.i_have_a_X_cucumber_step()
</code></pre><h2 id="Singular-and-plural"><a href="#Singular-and-plural" class="headerlink" title="Singular and plural"></a>Singular and plural</h2><p>Use ? qualifier to match words in both singular and plural. ? at the end of a word makes the last letter optional. We can also use the logical alternative operator | (pipe) to support correct grammar as well as irregular plurals which will make sentence read better.</p>
<pre><code>@Given(&quot;^There (?:is|are) (\\d+) (?:cats?|ox|oxen) fed by (\\d+) (?:persons?|people)$&quot;)
public void animals_fed_by_people(int animals, int persons) throws Throwable {
    System.out.println(
            format(&quot;{0} animal(s) fed by {1} person(s)&quot;, animals, persons));
}

Given There is 1 cat fed by 1 person
Given There are 2 cats fed by 1 person
Given There are 2 cats fed by 2 persons
Given There are 2 cats fed by 3 people
Given There is 1 ox fed by 4 persons
Given There are 3 oxen fed by 5 people
</code></pre><h2 id="Use-Data-Tables"><a href="#Use-Data-Tables" class="headerlink" title="Use Data Tables"></a>Use Data Tables</h2><p>You can use DataTable to manage larger amount of data. They are quite powerful but not the most intuitive as you either need to deal with a list of maps or a map of lists.</p>
<pre><code>@Given (&quot;^I have the following order$&quot;)
public void i_have_the_following_order (DataTable table) throws Throwable {
    for (Map&lt;String, String&gt; map : table.asMaps(String.class, String.class)) {
        String vegetable = map.get(&quot;vegetable&quot;);
        String amount = map.get(&quot;amount&quot;);
        String cost = map.get(&quot;cost&quot;);
        System.out.println(
                format(&quot;Order of {0} {1}s at the cost of {2}&quot;,
                amount, vegetable, cost));
    }
}

Scenario: Data tables
  Given I have the following order
    | vegetable | amount | cost |
    | cucumber  |   4    |  10  |
    | carrot    |   5    |   6  |
    | potato    |   6    |   4  |
</code></pre><h2 id="Map-data-tables-to-domain-objects"><a href="#Map-data-tables-to-domain-objects" class="headerlink" title="Map data tables to domain objects"></a>Map data tables to domain objects</h2><p>Luckily there are easier ways to access your data than <a href="http://cukes.info/api/cucumber/jvm/javadoc/cucumber/api/DataTable.html" target="_blank" rel="external">DataTable</a>. For instance you can create a domain object and have Cucumber map your data in a table to a list of these.</p>
<pre><code>@Given(&quot;^I have another order$&quot;)
public void i_have_another_order(List&lt;OrderItem&gt; list) throws Throwable {
    for (OrderItem orderItem : list) {
        String vegetable = orderItem.getVegetable ();
        int amount = orderItem.getAmount();
        int cost = orderItem.getCost ();
        System.out.println(
                format(&quot;Order of {0} {1}s at the cost of {2}&quot;,
                amount, vegetable, cost));
    }
}
</code></pre><p>Our domain object – OrderItem</p>
<pre><code>package com.czeczotka.bdd.domain;

public class OrderItem {

    private String vegetable;
    private int amount;
    private int cost;

    public String getVegetable () {
        return vegetable;
    }

    public void setVegetable (String vegetable) {
        this.vegetable = vegetable;
    }

    public int getAmount () {
        return amount;
    }

    public void setAmount (int amount) {
        this.amount = amount;
    }

    public int getCost () {
        return cost;
    }

    public void setCost (int cost) {
        this.cost = cost;
    }
}

Scenario: List of domain objects
  Given I have another order
    | vegetable | amount | cost |
    | cucumber  |   4    |  10  |
    | carrot    |   5    |   6  |
    | potato    |   6    |   4  |
</code></pre><h2 id="More-on-Java-and-regular-expressions"><a href="#More-on-Java-and-regular-expressions" class="headerlink" title="More on Java and regular expressions"></a>More on Java and regular expressions</h2><p>If you want a bit more detail on how regular expressions work in Java  probably the best  place to start is the <a href="http://docs.oracle.com/javase/tutorial/essential/regex/" target="_blank" rel="external">Java Tutorial</a> and the detailed javadoc for the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="external">Pattern</a> class.</p>
<h2 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h2><p>The code of this post is on github so follow the link below to browse it.</p>
<p><a href="http://github.com/czeczotka/cucumber-jvm-regex" target="_blank" rel="external">http://github.com/czeczotka/cucumber-jvm-regex</a></p>
<p>You can easily clone and play with it locally by simply following these steps.</p>
<pre><code>$ git clone https://github.com/czeczotka/cucumber-jvm-regex.git
$ cd cucumber-jvm-regex
$ mvn test
</code></pre><p>I believe with the tools described here you have enough options to get started and create powerful step definitions. Last thing to note is that when you run the code above the System.out.println will appear before Cucumber output and this is because Cucumber displays its output after scenario execution when system outs have already written to the output stream.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cucumber </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Show LOC per Author in Git]]></title>
      <url>/2016/10/13/git-show-loc-per-author/</url>
      <content type="html"><![CDATA[<p>If you want to check how many lines of code you’ve pushed to a Git repository, you can do it by <code>git log</code>.</p>
<p>Two ways to get the numbers, using <code>gawk</code> and <code>awk</code> repectively:</p>
<a id="more"></a>
<pre><code>git log --author=&quot;Kevin He&quot; --pretty=tformat: --numstat | gawk &apos;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s removed lines: %s total lines: %s\n&quot;, add, subs, loc }&apos;

git log --numstat --pretty=&quot;%H&quot; --author=&quot;Kevin He&quot; | awk &apos;NF==3 {plus+=$1; minus+=$2} END {printf(&quot;+%d, -%d, %d\n&quot;, plus, minus, plus-minus)}&apos;
</code></pre><p>If you want check LOC of a specified time period, you can do:</p>
<pre><code>git log --numstat --pretty=&quot;%H&quot; --author=&quot;Kevin He&quot; --since 2weeks | awk &apos;NF==3 {plus+=$1; minus+=$2} END {printf(&quot;+%d, -%d, %d\n&quot;, plus, minus, plus-minus)}&apos;
</code></pre><p>Or you want to check LOC changed between two commits:</p>
<pre><code>git log --numstat --pretty=&quot;%H&quot; --author=&quot;Kevin He&quot; commit1..commit2 | awk &apos;NF==3 {plus+=$1; minus+=$2} END {printf(&quot;+%d, -%d, %d\n&quot;, plus, minus, plus-minus)}&apos;
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet 3.0 Annotation]]></title>
      <url>/2016/10/05/servlet3-annotation/</url>
      <content type="html"><![CDATA[<p>Servlet 3.0 has many new features like <strong>pluggability and the extension support</strong>, <strong>asynchronous execution of processing</strong>,and <strong>a new set of annotations</strong>.</p>
<p>And with these annotations, we can write servlet completely without web.xml.</p>
<a id="more"></a>
<p>You can use below annotations on your servlet or filter to achieve the same effect as you usually do in web.xml</p>
<pre><code>@WebServlet

@WebFilter

@WebListener
</code></pre><p>If you don’t own the source code of the servlet or filter, you can register them programmatically by implementing your own <code>ServletContainerInitializer</code>. In spring-web, there is already an implementation <code>SpringServletContainerInitializer</code>, we can utilize this and just provide an implementation of <code>WebApplicationInitializer</code>. A sample for a JWS project:</p>
<pre><code>public class WebInit implements WebApplicationInitializer {
    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {

        servletContext.addFilter(&quot;hibernateFilter&quot;, OpenEntityManagerInViewFilter.class).addMappingForUrlPatterns(null, false, &quot;/*&quot;);

        AnnotationConfigWebApplicationContext root = new AnnotationConfigWebApplicationContext();
        root.register(MainConfig.class);
        servletContext.addListener(new ContextLoaderListener(root));

        ServletRegistration.Dynamic jnlpDownloadServlet = servletContext.addServlet(&quot;JnlpDownloadServlet&quot;, new JnlpDownloadServlet());
        jnlpDownloadServlet.setLoadOnStartup(1);
        jnlpDownloadServlet.addMapping(&quot;*.jnlp&quot;, &quot;webstart/*&quot;);

    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> servlet </tag>
            
            <tag> annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSONPath - Stefan Goessner JSONPath Implementation]]></title>
      <url>/2016/09/26/json-path/</url>
      <content type="html"><![CDATA[<p>A frequently emphasized advantage of XML is the availability of plenty tools to analyze, transform and selectively extract data out of XML documents. <a href="https://en.wikipedia.org/wiki/XPath" target="_blank" rel="external">XPath</a> is one of these powerful tools.</p>
<p>It’s time to wonder, if there is a need for something like XPath4JSON and what are the problems it can solve.</p>
<a id="more"></a>
<ul>
<li><p>Data may be interactively found and extracted out of <a href="http://json.org" target="_blank" rel="external">JSON</a> structures on the client without special scripting.</p>
</li>
<li><p>JSON data requested by the client can be reduced to the relevant parts on the server, such minimizing the bandwidth usage of the server response.</p>
</li>
</ul>
<p>If we agree, that a tool for picking parts out of a JSON structure at hand does make sense, some questions come up. How should it do its job? How do JSONPath expressions look like?</p>
<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ul>
<li><a href="#jsonpath">JSONPath - XPath for JSON</a></li>
<li><a href="#expression">JSONPath Expressions</a></li>
<li><a href="#examples">JSON Examples</a></li>
<li><a href="#javaimpl">JSONPath Java Implementation</a></li>
<li><a href="#otherimpl">JSONPath JS/PHP Implementation</a></li>
<li><a href="#issues">Issues</a></li>
</ul>
<h2 id="JSONPath-XPath-for-JSON"><a href="#JSONPath-XPath-for-JSON" class="headerlink" title="JSONPath - XPath for JSON"></a><a name="jsonpath"></a>JSONPath - XPath for JSON</h2><p>Due to the fact, that JSON is a natural representation of data for the C family of programming languages, the chances are high, that the particular language has native syntax elements to access a JSON structure.</p>
<p>The following XPath expression</p>
<pre><code>/store/book[1]/title
</code></pre><p>would look like</p>
<pre><code>x.store.book[0].title
</code></pre><p>or</p>
<pre><code>x[&apos;store&apos;][&apos;book&apos;][0][&apos;title&apos;]
</code></pre><p>In Javascript, Python and PHP with a variable x holding the JSON structure. Here we observe, that the particular language usually has a fundamental XPath feature already built in.</p>
<p>The JSONPath tool in question should …</p>
<ul>
<li><p>be naturally based on those language characteristics.</p>
</li>
<li><p>cover only essential parts of XPath 1.0.</p>
</li>
<li><p>be lightweight in code size and memory consumption.</p>
</li>
<li><p>be runtime efficient.</p>
</li>
</ul>
<h2 id="JSONPath-Expressions"><a href="#JSONPath-Expressions" class="headerlink" title="JSONPath Expressions"></a><a name="expression"></a>JSONPath Expressions</h2><p>JSONPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination with an XML document. Since a JSON structure is usually anonymous and doesn’t necessarily have a “root member object” JSONPath assumes the abstract name $ assigned to the outer level object.</p>
<p>JSONPath expressions can use the dot–notation</p>
<pre><code>$.store.book[0].title
</code></pre><p>or the bracket–notation</p>
<pre><code>$[&apos;store&apos;][&apos;book&apos;][0][&apos;title&apos;]
</code></pre><p>For input paths. Internal or output paths will always be converted to the more general bracket–notation.</p>
<p>JSONPath allows the wildcard symbol * for member names and array indices. It borrows the descendant operator ‘..’ from <a href="http://en.wikipedia.org/wiki/E4X" target="_blank" rel="external">E4X</a> and the <a href="http://developer.mozilla.org/es4/proposals/slice_syntax.html" target="_blank" rel="external">array slice syntax</a> proposal [start:end:step] from <a href="http://www.ecmascript.org/" target="_blank" rel="external">ECMASCRIPT 4</a>.</p>
<p>Expressions of the underlying scripting language (<expr>) can be used as an alternative to explicit names or indices as in</expr></p>
<pre><code>$.store.book[(@.length-1)].title
</code></pre><p>Using the symbol ‘@’ for the current object. Filter expressions are supported via the syntax ?(<boolean expr="">) as in</boolean></p>
<pre><code>$.store.book[?(@.price &lt; 10)].title
</code></pre><p>Here is a complete overview and a side by side comparison of the JSONPath syntax elements with its XPath counterparts.</p>
<table>
<thead>
<tr>
<th style="text-align:center">XPath</th>
<th style="text-align:center">JSONPath</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">$</td>
<td style="text-align:left">The root object/element</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">@</td>
<td style="text-align:left">The current object/element</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">. or []</td>
<td style="text-align:left">Child operation</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:center">n/a</td>
<td style="text-align:left">Parent operator</td>
</tr>
<tr>
<td style="text-align:center">//</td>
<td style="text-align:center">..</td>
<td style="text-align:left">Recursive descent. JSONPath borrows this syntax from E4X.</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">*</td>
<td style="text-align:left">Wildcard. All objects/elements regardless their names.</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:center">n/a</td>
<td style="text-align:left">Attribute access. JSON structures don’t have attributes.</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">[]</td>
<td style="text-align:left">Subscript operator. XPath uses it to iterate over element collections and for predicates. In Javascript and JSON it is the native array operator.</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center"></td>
<td style="text-align:left">[,]</td>
<td>Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set.</td>
</tr>
<tr>
<td style="text-align:center">n/a</td>
<td style="text-align:center">[start:end:step]</td>
<td style="text-align:left">Array slice operator borrowed from ES4.</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">?()</td>
<td style="text-align:left">Applies a filter (script) expression.</td>
</tr>
<tr>
<td style="text-align:center">n/a</td>
<td style="text-align:center">()</td>
<td style="text-align:left">Script expression, using the underlying script engine.</td>
</tr>
<tr>
<td style="text-align:center">()</td>
<td style="text-align:center">n/a</td>
<td style="text-align:left">Grouping in Xpath</td>
</tr>
</tbody>
</table>
<p>XPath has a lot more to offer (Location paths in not abbreviated syntax, operators and functions) than listed here. Moreover there is a remarkable difference how the subscript operator works in XPath and JSONPath.</p>
<ul>
<li><p>Square brackets in XPath expressions always operate on the node set resulting from the previous path fragment. Indices always start by 1.</p>
</li>
<li><p>With JSONPath square brackets operate on the object or array addressed by the previous path fragment. Indices always start by 0.</p>
</li>
</ul>
<h2 id="JSON-Examples"><a href="#JSON-Examples" class="headerlink" title="JSON Examples"></a><a name="examples"></a>JSON Examples</h2><p>Let’s practice JSONPath expressions by some more examples. We start with a simple JSON structure built after an XML example representing a bookstore (original <a href="http://coli.lili.uni-bielefeld.de/~andreas/Seminare/sommer02/books.xml" target="_blank" rel="external">XML file</a>).</p>
<pre><code>{ &quot;store&quot;: {
    &quot;book&quot;: [ 
      { &quot;category&quot;: &quot;reference&quot;,
        &quot;author&quot;: &quot;Nigel Rees&quot;,
        &quot;title&quot;: &quot;Sayings of the Century&quot;,
        &quot;price&quot;: 8.95
      },
      { &quot;category&quot;: &quot;fiction&quot;,
        &quot;author&quot;: &quot;Evelyn Waugh&quot;,
        &quot;title&quot;: &quot;Sword of Honour&quot;,
        &quot;price&quot;: 12.99
      },
      { &quot;category&quot;: &quot;fiction&quot;,
        &quot;author&quot;: &quot;Herman Melville&quot;,
        &quot;title&quot;: &quot;Moby Dick&quot;,
        &quot;isbn&quot;: &quot;0-553-21311-3&quot;,
        &quot;price&quot;: 8.99
      },
      { &quot;category&quot;: &quot;fiction&quot;,
        &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,
        &quot;title&quot;: &quot;The Lord of the Rings&quot;,
        &quot;isbn&quot;: &quot;0-395-19395-8&quot;,
        &quot;price&quot;: 22.99
      }
    ],
    &quot;bicycle&quot;: {
      &quot;color&quot;: &quot;red&quot;,
      &quot;price&quot;: 19.95
    }
  }
}
</code></pre><table>
<thead>
<tr>
<th style="text-align:left">XPath</th>
<th style="text-align:left">JSONPath</th>
<th style="text-align:left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/store/book/author</td>
<td style="text-align:left">$.store.book[*].author</td>
<td style="text-align:left">The authors of all books in the store</td>
</tr>
<tr>
<td style="text-align:left">//author</td>
<td style="text-align:left">$..author</td>
<td style="text-align:left">All authors</td>
</tr>
<tr>
<td style="text-align:left">/store/*</td>
<td style="text-align:left">$.store.*</td>
<td style="text-align:left">All things in store, which are some books and a red bicycle</td>
</tr>
<tr>
<td style="text-align:left">/store//price</td>
<td style="text-align:left">$.store..price</td>
<td style="text-align:left">The price of everything in the store</td>
</tr>
<tr>
<td style="text-align:left">//book[3]</td>
<td style="text-align:left">$..book[2]</td>
<td style="text-align:left">The third book</td>
</tr>
<tr>
<td style="text-align:left">//book[last()]</td>
<td style="text-align:left">$..book[(@.length-1)]<br> $..book[-1:]</td>
<td style="text-align:left">The last book in order</td>
</tr>
<tr>
<td style="text-align:left">//book[position()&lt;3]</td>
<td style="text-align:left">$..book[0,1]<br> $..book[:2]</td>
<td style="text-align:left">The first two books</td>
</tr>
<tr>
<td style="text-align:left">//book[isbn]</td>
<td style="text-align:left">$..book[?(@.isbn)</td>
<td style="text-align:left">Filter all books with isbn number</td>
</tr>
<tr>
<td style="text-align:left">//book[price&lt;10]</td>
<td style="text-align:left">$..book[?(@.price&lt;10)]</td>
<td style="text-align:left">Filter all books cheaper than 10</td>
</tr>
<tr>
<td style="text-align:left">//*</td>
<td style="text-align:left">$..*</td>
<td style="text-align:left">All Elements in XML document. All members of JSON structure.</td>
</tr>
</tbody>
</table>
<h2 id="JSONPath-Java-Implementation"><a href="#JSONPath-Java-Implementation" class="headerlink" title="JSONPath Java Implementation"></a><a name="javaimpl"></a>JSONPath Java Implementation</h2><p>Please find it in <a href="https://github.com/jayway/JsonPath" target="_blank" rel="external">GitHub</a></p>
<h2 id="JSONPath-JS-PHP-Implementation"><a href="#JSONPath-JS-PHP-Implementation" class="headerlink" title="JSONPath JS/PHP Implementation"></a><a name="otherimpl"></a>JSONPath JS/PHP Implementation</h2><p>JSONPath is implemented in Javascript for client side usage and ported over to PHP for use on the server.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>All you need to do is downloading either of the files</p>
<ul>
<li><a href="http://code.google.com/p/jsonpath/" target="_blank" rel="external">jsonpath.js</a></li>
<li><a href="http://code.google.com/p/jsonpath/" target="_blank" rel="external">jsonpath.php</a></li>
</ul>
<p>Include it in your program and use the simple API consisting of one single function.</p>
<p>jsonPath(obj, expr [, args])</p>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters:"></a>Parameters:</h3><ul>
<li><p>obj (object|array):</p>
<p>  Object representing the JSON structure.</p>
</li>
<li><p>expr (string):</p>
<p>  JSONPath expression string.</p>
</li>
<li><p>args (object|undefined):</p>
<p>  Object controlling path evaluation and output. Currently only one member is supported.</p>
</li>
<li><p>args.resultType (“VALUE”|“PATH”):</p>
<p>  Causes the result to be either matching values (default) or normalized path expressions.</p>
</li>
</ul>
<h3 id="Return-value"><a href="#Return-value" class="headerlink" title="Return value"></a>Return value</h3><ul>
<li><p>(array|false):</p>
<p>  Array holding either values or normalized path expressions matching the input path expression, which can be used for lazy evaluation. false in case of no match.</p>
</li>
</ul>
<h3 id="Javascript-Example"><a href="#Javascript-Example" class="headerlink" title="Javascript Example"></a>Javascript Example</h3><pre><code>var o = { /*...*/ },  // the &apos;store&apos; JSON object from above
res1 = jsonPath(o, &quot;$..author&quot;).toJSONString(),
res2 = jsonPath(o, &quot;$..author&quot;, {resultType:&quot;PATH&quot;}).toJSONString
</code></pre><h3 id="PHP-Example"><a href="#PHP-Example" class="headerlink" title="PHP Example"></a>PHP Example</h3><p>We need here to convert the JSON string to a PHP array first. I am using Michal Migurski’s JSON parser for that.</p>
<pre><code>require_once(&apos;json.php&apos;);      // JSON parser
require_once(&apos;jsonpath.php&apos;);  // JSONPath evaluator

$json = &apos;{ ... }&apos;;  // JSON structure from above

$parser = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
$o = $parser-&gt;decode($json);
$match1 = jsonPath($o, &quot;$..author&quot;);
$match2 = jsonPath($o, &quot;$..author&quot;, array(&quot;resultType&quot; =&gt; &quot;PATH&quot;));
$res1 = $parser-&gt;encode($match1);
$res2 = $parser-&gt;encode($match2);
</code></pre><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>Both Javascript and PHP example result in the following JSON arrays (as strings):</p>
<pre><code>res1:
[ &quot;Nigel Rees&quot;,
  &quot;Evelyn Waugh&quot;,
  &quot;Herman Melville&quot;,
  &quot;J. R. R. Tolkien&quot;
]
res2:
[ &quot;$[&apos;store&apos;][&apos;book&apos;][0][&apos;author&apos;]&quot;,
  &quot;$[&apos;store&apos;][&apos;book&apos;][1][&apos;author&apos;]&quot;,
  &quot;$[&apos;store&apos;][&apos;book&apos;][2][&apos;author&apos;]&quot;,
  &quot;$[&apos;store&apos;][&apos;book&apos;][3][&apos;author&apos;]&quot;
]
</code></pre><p>Please note, that the return value of jsonPath is an array, which is also a valid JSON structure. So you might want to apply jsonPath to the resulting structure again or use one of your favorite array methods as sort with it.</p>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a><a name="issues"></a>Issues</h2><ul>
<li><p>Currently only single quotes allowed inside of JSONPath expressions.</p>
</li>
<li><p>Script expressions inside of JSONPath locations are currently not recursively evaluated by jsonPath. Only the global $ and local @ symbols are expanded by a simple regular expression. </p>
</li>
<li><p>An alternative for jsonPath to return false in case of no match may be to return an empty array in future.</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> json </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Build SS Server on a VPS]]></title>
      <url>/2016/09/20/build-ss-server/</url>
      <content type="html"><![CDATA[<p>The SS proxy is proven to be faster and more stable than SSH. Here is an introduction on how to build SS server on a VPS.</p>
<a id="more"></a>
<h2 id="Install-SS-server"><a href="#Install-SS-server" class="headerlink" title="Install SS server:"></a>Install SS server:</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu:"></a>Debian/Ubuntu:</h3><pre><code>apt-get install python-pip

pip install shadowsocks
</code></pre><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS:"></a>CentOS:</h3><pre><code>yum install python-setuptools &amp;&amp; easy_install pip

pip install shadowsocks
</code></pre><h2 id="Write-a-Configuration-File-for-SS"><a href="#Write-a-Configuration-File-for-SS" class="headerlink" title="Write a Configuration File for SS"></a>Write a Configuration File for SS</h2><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample:"></a>Sample:</h3><pre><code>{ 
  &quot;server&quot;: &quot;IP of VPS&quot;, 
  &quot;server_port&quot;: 3333, /* Port of SS server, not the same as SSH port, better to be greater than 1024 */
  &quot;local_port&quot;: 1080, 
  &quot;password&quot;: &quot;mypassword&quot;,
  &quot;timeout&quot;: 300, 
  &quot;method&quot;: &quot;aes-256-cfb&quot; /* encryption method, recommend to use aes-256-cfb */
}
</code></pre><h3 id="Sample-Multiple-SS-account"><a href="#Sample-Multiple-SS-account" class="headerlink" title="Sample - Multiple SS account"></a>Sample - Multiple SS account</h3><pre><code>{  
  &quot;server&quot;: &quot;IP of VPS&quot;,
  &quot;port_password&quot;: {  
    &quot;1080&quot;: &quot;password1&quot;,
    &quot;1081&quot;: &quot;password2&quot;
  },
  &quot;timeout&quot;: 300,
  &quot;method&quot;: &quot;aes-256-cfb&quot;, /* Set to true to reduce latency if your Linx kernal is 3.7+ */
  &quot;fast_open&quot;: false,
  &quot;workers&quot;: 1,
  &quot;_comment&quot;: {  
    &quot;1080&quot;: &quot;myself&quot;,
    &quot;1081&quot;: &quot;guest&quot;
  }
}
</code></pre><h2 id="Start-Stop-SS-server"><a href="#Start-Stop-SS-server" class="headerlink" title="Start/Stop SS server"></a>Start/Stop SS server</h2><h3 id="Start-Stop-with-Configuration-File"><a href="#Start-Stop-with-Configuration-File" class="headerlink" title="Start/Stop with Configuration File"></a>Start/Stop with Configuration File</h3><pre><code>ssserver -c /etc/shadowsocks.json -d start

ssserver -c /etc/shadowsocks.json -d stop
</code></pre><h3 id="Start-Stop-with-Configuration-in-Command-Line"><a href="#Start-Stop-with-Configuration-in-Command-Line" class="headerlink" title="Start/Stop with Configuration in Command Line"></a>Start/Stop with Configuration in Command Line</h3><pre><code>ssserver -p 1080 -k mypassword -m aes-256-cfb --user nobody -d start

ssserver -d stop
</code></pre><h3 id="Log-File"><a href="#Log-File" class="headerlink" title="Log File"></a>Log File</h3><pre><code>/var/log/shadowsocks.log   
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> ss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SED - Substitute Multiple Lines]]></title>
      <url>/2016/09/16/sed-multiple-lines/</url>
      <content type="html"><![CDATA[<p>Ususally we use SED for stream processing which process text line by line (SED reads line by line, removes any trailing new lines, places a line in a pattern space buffer, process as per the given commands and prints the pattern space.) Sometimes we need to substitute multiple lines. SED can handle such case as well.</p>
<a id="more"></a>
<p>For example, if we want to replace some text like below with a single word “SINGLEWORD”:</p>
<pre><code>START
Line 1
Line 2
Line 3
END
</code></pre><p>We can use below command to achieve the purpose:</p>
<pre><code>sed -i &apos;:begin; N; $! b begin; s~START.*END~SINGLEWORD~g&apos; filename
</code></pre><ul>
<li><p><code>:begin</code> create a label ‘begin’</p>
</li>
<li><p><code>N</code> append the next line to the pattern space</p>
</li>
<li><p><code>$!</code> if it is not the last line, branch to label begin</p>
</li>
<li><p><code>s</code> substitute</p>
</li>
</ul>
<p>Commands to manipulate pattern space:</p>
<pre><code>:  # label
=  # line_number
a  # append_text_to_stdout_after_flush
b  # branch_unconditional             
c  # range_change                     
d  # pattern_delete_top/cycle          
D  # pattern_ltrunc(line+nl)_top/cycle 
g  # pattern=hold                      
G  # pattern+=nl+hold                  
h  # hold=pattern                      
H  # hold+=nl+pattern                  
i  # insert_text_to_stdout_now         
l  # pattern_list                       
n  # pattern_flush=nextline_continue   
N  # pattern+=nl+nextline              
p  # pattern_print                     
P  # pattern_first_line_print          
q  # flush_quit                        
r  # append_file_to_stdout_after_flush 
s  # substitute                                          
t  # branch_on_substitute              
w  # append_pattern_to_file_now         
x  # swap_pattern_and_hold             
y  # transform_chars
</code></pre><p>If we don’t want to read the whole file into pattern space when the file you are operating on is very large, we can limit the lines read into pattern space by below:</p>
<pre><code>sed -i &apos;:begin /START/, /END/ { /END/! { $! { N; b begin;} }; s~START.*END~SINGLEWORD~g};&apos; filename
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> sed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unit Outing - Xinchang]]></title>
      <url>/2016/09/11/unit-outing/</url>
      <content type="html"><![CDATA[<p>In the last two days we had a great weekend at Xinchang. We visited the famous Grand Buddha Temple and the food in the hotel were great too. We all had a great time together and looking forward to the next outing!</p>
<a id="more"></a>
<p><img src="/images/posts/xinchang_outing/all.jpg" alt="all"></p>
<p><img src="/images/posts/xinchang_outing/team_color.jpg" alt="team_corlor"></p>
<p><img src="/images/posts/xinchang_outing/team.jpg" alt="team"></p>
<p><img src="/images/posts/xinchang_outing/maitreya.jpg" alt="maitreya"></p>
<p><img src="/images/posts/xinchang_outing/relics.jpg" alt="relics"></p>
<p><img src="/images/posts/xinchang_outing/waterfall.jpg" alt="waterfall"></p>
<p><img src="/images/posts/xinchang_outing/food_1.jpg" alt="food_1"></p>
<p><img src="/images/posts/xinchang_outing/food_2.jpg" alt="food_2"></p>
<p><img src="/images/posts/xinchang_outing/shirui.jpg" alt="shirui"></p>
<p><img src="/images/posts/xinchang_outing/michael.jpg" alt="michael"></p>
<p><img src="/images/posts/xinchang_outing/athen.jpg" alt="athen"></p>
<p><img src="/images/posts/xinchang_outing/athen2.jpg" alt="athen2"></p>
<p><img src="/images/posts/xinchang_outing/ningqiang.jpg" alt="ningqiang"></p>
<p><img src="/images/posts/xinchang_outing/haining.jpg" alt="haining"></p>
<p><img src="/images/posts/xinchang_outing/turnback.jpg" alt="turnback"></p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Check Connections in Oracle]]></title>
      <url>/2016/08/31/check-connections-in-oracle/</url>
      <content type="html"><![CDATA[<p>To monitor the connections used in Oracle, you can use below SQL to get the data.</p>
<a id="more"></a>
<p>Get current connections and percentage of used connection to max connections:</p>
<pre><code>SELECT I.INSTANCE_NAME,
       I.HOST_NAME,
       COUNT(*) CONNECTIONS,
       ROUND((COUNT(*) / P.VALUE * 100),2) AS PERCENT_USED
FROM GV$SESSION S, GV$INSTANCE I, GV$PARAMETER P
WHERE S.INST_ID = I.INST_ID AND I.INST_ID = P.INST_ID
  AND USERNAME = &apos;YOUR_USER&apos;
  AND P.NAME = &apos;sessions&apos;
GROUP BY I.HOST_NAME, I.INSTANCE_NAME, P.VALUE
ORDER BY I.HOST_NAME;
</code></pre><p>Get connections count for each machine:</p>
<pre><code>SELECT MACHINE, COUNT(*)
FROM GV$SESSION S, GV$INSTANCE I, GV$PARAMETER P
WHERE S.INST_ID = I.INST_ID AND I.INST_ID = P.INST_ID
  AND USERNAME = &apos;YOUR_USER&apos;
GROUP BY MACHINE;
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Clone a database in MySQL]]></title>
      <url>/2016/08/18/mysql-clone-database/</url>
      <content type="html"><![CDATA[<p>There are different ways to clone a database in MySQL.</p>
<a id="more"></a>
<h2 id="Using-mysqldbcopy"><a href="#Using-mysqldbcopy" class="headerlink" title="Using mysqldbcopy"></a>Using mysqldbcopy</h2><p>The MySQL Utilities contain the nice tool <code>mysqldbcopy</code> which by default copies a DB including all related objects (tables, views, triggers, events, procedures, functions, and database-level grants) and data from one DB server to the same or to another DB server. There are lots of options available to customize what is actually copied</p>
<pre><code>mysqldbcopy \
    --source=root:password@localhost \
    --destination=root:password@localhost \
    db1:db2
</code></pre><h2 id="Using-mysqldump"><a href="#Using-mysqldump" class="headerlink" title="Using mysqldump"></a>Using mysqldump</h2><pre><code>mysqladmin create db2 -uroot -ppassword &amp;&amp; \
    mysqldump -uroot -ppassword db1 | mysql -uroot -ppassword -h db_host db2
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Ignore Pattern]]></title>
      <url>/2016/08/06/git-ignore/</url>
      <content type="html"><![CDATA[<p>Here is an introduction to pattern format in .gitignore.</p>
<a id="more"></a>
<h2 id="PATTERN-FORMAT"><a href="#PATTERN-FORMAT" class="headerlink" title="PATTERN FORMAT"></a>PATTERN FORMAT</h2><ul>
<li><p>A blank line matches no files, so it can serve as a separator for readability.</p>
</li>
<li><p>A line starting with <code>#</code> serves as a comment. Put a backslash (“<code>\</code>“) in front of the first hash for patterns that begin with a hash.</p>
</li>
<li><p>Trailing spaces are ignored unless they are quoted with backslash (“<code>\</code>“).</p>
</li>
<li><p>An optional prefix “<code>!</code>“ which negates the pattern; any matching file excluded by a previous pattern will become included again. It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. Put a backslash (“<code>\</code>“) in front of the first “<code>!</code>“ for patterns that begin with a literal “<code>!</code>“, for example, “<code>\!important!.txt</code>“.</p>
</li>
<li><p>If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory. In other words, <code>foo/</code> will match a directory <code>foo</code> and paths underneath it, but will not match a regular file or a symbolic link <code>foo</code> (this is consistent with the way how pathspec works in general in Git).</p>
</li>
<li><p>If the pattern does not contain a slash <code>/</code>, Git treats it as a shell glob pattern and checks for a match against the pathname relative to the location of the <code>.gitignore</code> file (relative to the toplevel of the work tree if not from a <code>.gitignore</code> file).</p>
</li>
<li><p>Otherwise, Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a <code>/</code> in the pathname. For example, “<code>Documentation/*.html</code>“ matches “<code>Documentation/git.html</code>“ but not “<code>Documentation/ppc/ppc.html</code>“ or “<code>tools/perf/Documentation/perf.html</code>“.</p>
</li>
<li><p>A leading slash matches the beginning of the pathname. For example, “<code>/*.c</code>“ matches “<code>cat-file.c</code>“ but not “<code>mozilla-sha1/sha1.c</code>“.</p>
</li>
<li><p>Two consecutive asterisks (“<code>**</code>“) in patterns matched against full pathname may have special meaning:</p>
</li>
<li><p>A leading “<code>**</code>“ followed by a slash means match in all directories. For example, “<code>**/foo</code>“ matches file or directory “<code>foo</code>“ anywhere, the same as pattern “<code>foo</code>“. “<code>**/foo/bar</code>“ matches file or directory “<code>bar</code>“ anywhere that is directly under directory “<code>foo</code>“.</p>
</li>
<li><p>A trailing “<code>/**</code>“ matches everything inside. For example, “<code>abc/**</code>“ matches all files inside directory “<code>abc</code>“, relative to the location of the <code>.gitignore</code> file, with infinite depth.</p>
</li>
<li><p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, “<code>a/**/b</code>“ matches “<code>a/b</code>“, “<code>a/x/b</code>“, “<code>a/x/y/b</code>“ and so on.</p>
</li>
</ul>
<p>Other consecutive asterisks are considered invalid.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Check Local Port Range in Linux]]></title>
      <url>/2016/07/16/check-local-port-range-in-linux/</url>
      <content type="html"><![CDATA[<p>The /proc/sys/net/ipv4/ip_local_port_range defines the local port range that is used by TCP and UDP traffic to choose the local port. You will see in the parameters of this file two numbers: The first number is the first local port allowed for TCP and UDP traffic on the server, the second is the last local port number. For high-usage systems you may change its default parameters to <code>32768-61000</code>.</p>
<a id="more"></a>
<p>The default setup for the ip_local_port_range parameters under Red Hat Linux is: “<code>1024 4999</code>“</p>
<p>If you are picking up a port number for you web server or JMX port etc, you’d better choose numbers that are not in the range to avoid conflicts. For example, if your configuration for the local port range is 32768-61000, then choose number from <code>1024-32768</code> and <code>61000-65535</code>.</p>
<p>To change the values of ip_local_port_range:</p>
<pre><code>$ echo 1024 65535 &gt; /proc/sys/net/ipv4/ip_local_port_range
</code></pre><p>OR</p>
<pre><code>$ sudo sysctl -w net.ipv4.ip_local_port_range=&quot;1024 64000&quot;
</code></pre><p>OR edit /etc/sysctl.conf to make changes to /proc filesystem permanently i.e. append the following line to your /etc/sysctl.conf file:</p>
<pre><code># increase system IP port limits
net.ipv4.ip_local_port_range = 1024 65535
</code></pre><p>You must restart your network for the change to take effect. The command to manually restart the network is the following:</p>
<pre><code>$ /etc/rc.d/init.d/network restart
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Solve Searching Problem in Mac's Mail]]></title>
      <url>/2016/07/12/solve-mail-search-problem/</url>
      <content type="html"><![CDATA[<p>Even when you know the basics of searching in Mac’s Mail, sometimes an email message you clearly remember stubbornly stays lost. </p>
<p>If a Mail search doesn’t display messages that you know it should - and you’ve ruled out user error such as selecting the wrong mailbox, or choosing a header instead of message contents—there are several possible causes. Which solution to use depends on whether errors occur searching message contents (the body of your message) or headers (the contents of the To, CC, BCC, From, and Subject fields).</p>
<a id="more"></a>
<h2 id="Problems-searching-headers"><a href="#Problems-searching-headers" class="headerlink" title="Problems searching headers"></a>Problems searching headers</h2><p>When you type a term into Mail’s Search field, you can optionally select a person, subject, or other category from a pop-up menu to create a token that Mail uses to search one or more headers alone (such as To, From, and Subject). (If you don’t explicitly select a header, or if you do but change the search token to say Entire Message, Mail searches message bodies as well as headers.) Surprisingly, Mail’s system for indexing and searching headers is separate from its system for indexing and searching message contents, so searching for header text (say, messages from a certain co-worker) could fail even if the same message is matched during a search of its contents.</p>
<p>Mail uses a set of files collectively called the Envelope Index to index and search message headers. So, if you’re unable to find messages when searching headers, there’s a good chance the Envelope Index is having problems. The surest solution is to force Mail to rebuild the entire Envelope Index.</p>
<p>To do this, first quit Mail. Then, in the Finder, hold down Option and choose Go -&gt; Library. Navigate to ~/Library/Mail/V2/MailData and drag the following files to the Trash: Envelope Index, Envelope Index-shm, and Envelope Index-wal. Open Mail again, and you’ll see a message that Mail has to import your messages. Click Continue and let it do so; what it’s really doing is rebuilding your Envelope Index. When this process finishes, try your search again.</p>
<p><img src="/images/posts/mac/envelopeindex.jpg" alt="envelopeindex.jpg"></p>
<p>If Mail fails to find the right messages when you search for words in the To, From, or Subject field, a bad Envelope Index could be to blame. If you need to delete your envelope index, these are the files to select.</p>
<h2 id="Problems-searching-message-contents"><a href="#Problems-searching-message-contents" class="headerlink" title="Problems searching message contents"></a>Problems searching message contents</h2><p>On the other hand, suppose you stick with the Entire Message option to look for words in the contents of message bodies, because you aren’t sure who sent the message or when, or because the number of matches using headers alone is too great. Searching for unusual, specific keywords you remember from the message (“furlong,” “fortnight”) or entire phrases (“lost in the mists of time”) can often lead you right to the message you want—unless full-text searching happens to be broken.</p>
<p>Mail uses OS X’s Spotlight feature to index and search the contents of messages, so if you have trouble with searching message contents, the most likely cause is a problem with your Spotlight index. Try the following potential cures, in this order, retrying your search after each until you’re successful:</p>
<p><strong>Check for privacy problems</strong> Open the Spotlight pane of System Preferences, go to the Privacy tab, and make sure it doesn’t show your ~/Library/Mail folder or any of its parent folders (such as your entire home folder) or the volume on which it’s located. If it does, select that folder or volume and click the minus (-) button to allow Spotlight to index it (which may take some time).</p>
<p><strong>Tweak settings</strong> For server-based accounts (IMAP, Exchange, iCloud, and MobileMe), make sure Mail is set to download entire messages—if it doesn’t, Spotlight can’t index them. Go to Mail -&gt; Preferences, click Accounts, select an account, and click Advanced. Make sure the Keep Copies Of Messages For Offline Viewing pop-up menu says All Messages And Their Attachments.</p>
<p><img src="/images/posts/mac/downloadall.jpg" alt="downloadall.jpg"></p>
<p>For every server-based account, go to this preference pane and make sure this pop-up menu is set to one of the “All Messages” options (preferably with attachments) to make sure Spotlight indexes all your mail.</p>
<p><strong>Re-index your messages</strong> Open Terminal (in /Applications/Utilities) and type this command, followed by Return: mdimport -r /System/Library/Spotlight/Mail.mdimporter This causes Spotlight to re-index all your Mail messages, leaving the rest of your Spotlight indexes (for other types of data) intact.</p>
<p><strong>Reset your Spotlight index</strong> If the other Spotlight fixes don’t work, you might need to reset your entire Spotlight index, although rebuilding it will take quite a bit of time—many hours if you’ve got a large hard drive full of files. In Terminal, enter this command and then press Return: sudo mdutil -E / Enter your OS X account password when prompted. (Note that only an account with administrative access can use this command.)</p>
<p><strong>Re-download or rebuild</strong> A final possibility, which again applies only to server-based accounts, is that the messages in one or more mailboxes weren’t downloaded correctly or completely in the first place. To fix this, first choose Mailbox -&gt; Synchronize to make sure server-based accounts are updated. Give Mail some time to process—you can view Mail’s Activity window, via Window -&gt; Activity, to monitor progress—and then try your search again.</p>
<p>If that doesn’t work, select each mailbox containing messages that aren’t being searched properly, and then choose Mailbox -&gt; Rebuild. This erases the local copies of all the messages in that mailbox and forces Mail to download them again from the server. In some situations, this can take even longer than rebuilding your Spotlight index, but it may be the only way to fix certain mailbox problems.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> mail </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NOSQL Selection]]></title>
      <url>/2016/07/08/no-sql-selection/</url>
      <content type="html"><![CDATA[<p>While SQL databases are insanely useful tools, their monopoly in the last decades is coming to an end. And it’s just time: I can’t even count the things that were forced into relational databases, but never really fitted them. (That being said, relational databases will always be the best for the stuff that has relations.)</p>
<p>But, the differences between NoSQL databases are much bigger than ever was between one SQL database and another. This means that it is a bigger responsibility on <strong>software architects</strong> to choose the appropriate one for a project right at the beginning.</p>
<a id="more"></a>
<p>In this light, here is a <strong>comparison</strong> of <strong>Open Source</strong> NOSQL databases.</p>
<p><img src="/images/posts/nosql/comparison.png" alt="comparison.png"></p>
<p>NOSQL is sort of based on CAP theorem. Traditional RDBMS has high expectation on consistency, so it is weak on availability and partition tolerance. NOSQL is on the opposite, it scarifies consistency for AP.</p>
<p>Based on the CAP theorem, you can choose the NOSQL database accordingly based on your application needs:</p>
<ul>
<li>CA - RDBMS</li>
<li>CP - Key-value database. Such as Google Big Table</li>
<li>AP - Document-oriented database. Such as Amazon Dynamo.</li>
</ul>
<p>A visual guide to NOSQL systems:</p>
<p><img src="/images/posts/nosql/cap.jpg" alt="cap.jpg"></p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> database </tag>
            
            <tag> nosql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grep Duplicate Words in Text]]></title>
      <url>/2016/07/04/find-duplicate-words-in-text/</url>
      <content type="html"><![CDATA[<p>To find duplicate words in a text by grep and support non-greedy search, you need to use <code>-P</code> which uses Perl regular expression to parse the pattern.</p>
<a id="more"></a>
<p>Example:</p>
<pre><code>$ echo &apos;This is a line of text text which has duplicate words words&apos; | grep -Po &apos;(\b.+)\1\b&apos;
</code></pre><p>The output will be<br>    text text<br>    words words</p>
<p><code>-o</code> means show only the part of a line matching pattern.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AWK - 10 Examples to Split a File into Multiple Files]]></title>
      <url>/2016/06/30/awk-split-file/</url>
      <content type="html"><![CDATA[<p>A very good post from <a href="http://www.theunixschool.com/2012/06/awk-10-examples-to-split-file-into.html" target="_blank" rel="external">The Unix School</a></p>
<p>In this article of the awk series, we will see the different scenarios in which we need to split a file into multiple files using awk. The files can be split into multiple files either based on a condition, or based on a pattern or because the file is big and hence needs to split into smaller files.</p>
<a id="more"></a>
<p>Sample File1:</p>
<p>Let us consider a sample file with the following contents:</p>
<pre><code>$ cat file1
Item1,200
Item2,500
Item3,900
Item2,800
Item1,600
</code></pre><h3 id="1-Split-the-file-into-3-different-files-one-for-each-item-i-e-All-records-pertaining-to-Item1-into-a-file-records-of-Item2-into-another-etc"><a href="#1-Split-the-file-into-3-different-files-one-for-each-item-i-e-All-records-pertaining-to-Item1-into-a-file-records-of-Item2-into-another-etc" class="headerlink" title="1. Split the file into 3 different files, one for each item. i.e, All records pertaining to Item1 into a file, records of Item2 into another, etc."></a>1. Split the file into 3 different files, one for each item. i.e, All records pertaining to Item1 into a file, records of Item2 into another, etc.</h3><pre><code>$ awk -F, &apos;{print &gt; $1}&apos; file1
</code></pre><p>The files generated by the above command are as  below:</p>
<pre><code>$ cat Item1
Item1,200
Item1,600

$ cat Item3
Item3,900

$ cat Item2
Item2,500
Item2,800
</code></pre><p>This looks so simple, right? print prints the entire line, and the line is printed to a file whose name is $1, which is the first field. This means, the first record will get written to a file named ‘Item1’, and the second record to ‘Item2’, third to ‘Item3’,  4th goes to ‘Item2’, and so on.</p>
<h3 id="2-Split-the-files-by-having-an-extension-of-txt-to-the-new-file-names"><a href="#2-Split-the-files-by-having-an-extension-of-txt-to-the-new-file-names" class="headerlink" title="2. Split the files by having an extension of .txt to the new file names."></a>2. Split the files by having an extension of .txt to the new file names.</h3><pre><code>$ awk -F, &apos;{print &gt; $1&quot;.txt&quot;}&apos; file1
</code></pre><p>The only change here from the above is concatenating the string “.txt” to the $1 which is the first field. As a result, we get the extension to the file names. The files created are below:</p>
<pre><code>$ ls *.txt
Item2.txt  Item1.txt  Item3.txt
</code></pre><h3 id="3-Split-the-files-by-having-only-the-value-the-second-field-in-the-individual-files-i-e-only-2nd-field-in-the-new-files-without-the-1st-field"><a href="#3-Split-the-files-by-having-only-the-value-the-second-field-in-the-individual-files-i-e-only-2nd-field-in-the-new-files-without-the-1st-field" class="headerlink" title="3. Split the files by having only the value(the second field) in the individual files, i.e, only 2nd field in the new files without the 1st field:"></a>3. Split the files by having only the value(the second field) in the individual files, i.e, only 2nd field in the new files without the 1st field:</h3><pre><code>$ awk -F, &apos;{print $2 &gt; $1&quot;.txt&quot;}&apos; file1
</code></pre><p>The print command prints the entire record. Since we want only the second field to go to the output files, we do: print $2.</p>
<pre><code>$ cat Item1.txt
200
600
</code></pre><h3 id="4-Split-the-files-so-that-all-the-items-whose-value-is-greater-than-500-are-in-the-file-“500G-txt”-and-the-rest-in-the-file-“500L-txt”"><a href="#4-Split-the-files-so-that-all-the-items-whose-value-is-greater-than-500-are-in-the-file-“500G-txt”-and-the-rest-in-the-file-“500L-txt”" class="headerlink" title="4. Split the files so that all the items whose value is greater than 500 are in the file “500G.txt”, and the rest in the  file “500L.txt”."></a>4. Split the files so that all the items whose value is greater than 500 are in the file “500G.txt”, and the rest in the  file “500L.txt”.</h3><pre><code>$ awk -F, &apos;{if($2&lt;=500)print &gt; &quot;500L.txt&quot;;else print &gt; &quot;500G.txt&quot;}&apos; file1
</code></pre><p>The output files created will be as below:</p>
<pre><code>$ cat 500L.txt
Item1,200
Item2,500

$ cat 500G.txt
Item3,900
Item2,800
Item1,600
</code></pre><p>Check the second field($2). If it is lesser or equal to 500, the record goes to “500L.txt”, else to “500G.txt”.</p>
<p>Other way to achieve the same thing is using the ternary operator in awk:</p>
<pre><code>$ awk -F, &apos;{x=($2&lt;=500)?&quot;500L.txt&quot;:&quot;500G.txt&quot;; print &gt; x}&apos; file1
</code></pre><p>The condition for greater or lesser than 500 is checked and the appropriate file name is assigned to variable x. The record is then written to the file present in the variable x.</p>
<p>Sample File2:</p>
<p>Let us consider another file with a different set of contents. This file has a pattern ‘START’ at frequent intervals.</p>
<pre><code>$ cat file2
START
Unix
Linux
START
Solaris
Aix
SCO
</code></pre><h3 id="5-Split-the-file-into-multiple-files-at-every-occurrence-of-the-pattern-START"><a href="#5-Split-the-file-into-multiple-files-at-every-occurrence-of-the-pattern-START" class="headerlink" title="5. Split the file into multiple files at every occurrence of the pattern START."></a>5. Split the file into multiple files at every occurrence of the pattern START.</h3><pre><code>$ awk &apos;/START/{x=&quot;F&quot;++i;}{print &gt; x;}&apos; file2
</code></pre><p>This command contains 2 sets of curly braces: The control goes to the first set of braces only on encountering a line containing the pattern START. The second set will be encountered by every line since there is no condition and hence always true.</p>
<p>On encountering the pattern START, a new file name is created and stored. When the first START comes, x will contain “F1” and the control goes to the next set of braces and the record is written to F1, and the subsequent records go the file “F1” till the next START comes. On encountering next START, x will contain “F2” and the subsequent lines goes to “F2” till the next START, and it continues.</p>
<pre><code>$ cat F1
START
Unix
Linux
Solaris

$ cat F2
START
Aix
SCO
</code></pre><h3 id="6-Split-the-file-into-multiple-files-at-every-occurrence-of-the-pattern-START-But-the-line-containing-the-pattern-should-not-be-in-the-new-files"><a href="#6-Split-the-file-into-multiple-files-at-every-occurrence-of-the-pattern-START-But-the-line-containing-the-pattern-should-not-be-in-the-new-files" class="headerlink" title="6. Split the file into multiple files at every occurrence of the pattern START. But the line containing the pattern should not be in the new files."></a>6. Split the file into multiple files at every occurrence of the pattern START. But the line containing the pattern should not be in the new files.</h3><pre><code>$ awk &apos;/START/{x=&quot;F&quot;++i;next}{print &gt; x;}&apos; file2
</code></pre><p>The only difference in this from the above is the inclusion of the next command. Due to the next command, the lines containing the START enters the first curly braces and then starts reading the next line immediately due to the next command. As a result, the START lines does not get to the second curly braces and hence the START does not appear in the split files.</p>
<pre><code>$ cat F1
Unix
Linux

$ cat F2
Solaris
Aix
SCO
</code></pre><h3 id="7-Split-the-file-by-inserting-a-header-record-in-every-new-file"><a href="#7-Split-the-file-by-inserting-a-header-record-in-every-new-file" class="headerlink" title="7. Split the file by inserting a header record in every new file."></a>7. Split the file by inserting a header record in every new file.</h3><pre><code>$ awk &apos;/START/{x=&quot;F&quot;++i;print &quot;ANY HEADER&quot; &gt; x;next}{print &gt; x;}&apos; file2
</code></pre><p>The change here from the earlier one is this: Before the next command, we write the header record into the file. This is the right place to write the header record since this is where the file is created first.</p>
<pre><code>$ cat F1
ANY HEADER
Unix
Linux

$ cat F2
ANY HEADER
Solaris
Aix
SCO
</code></pre><p>Sample File3: </p>
<p>Let us consider a file with the sample contents:</p>
<pre><code>$ cat file3
Unix
Linux
Solaris
AIX
SCO
</code></pre><h3 id="8-Split-the-file-into-multiple-files-at-every-3rd-line-i-e-First-3-lines-into-F1-next-3-lines-into-F2-and-so-on"><a href="#8-Split-the-file-into-multiple-files-at-every-3rd-line-i-e-First-3-lines-into-F1-next-3-lines-into-F2-and-so-on" class="headerlink" title="8. Split the file into multiple files at every 3rd line . i.e, First 3 lines into F1, next 3 lines into F2 and so on."></a>8. Split the file into multiple files at every 3rd line . i.e, First 3 lines into F1, next 3 lines into F2 and so on.</h3><p>$ awk ‘NR%3==1{x=”F”++i;}{print &gt; x}’  file3</p>
<p>In other words, this is nothing but splitting the file into equal parts. The condition does the trick here: NR%3==1 : NR is the line number of the current record. NR%3 will be equal to 1 for every 3rd line such as 1st, 4th, 7th and so on. And at every 3rd line, the file name is changed in the variable x, and hence the records are written to the appropriate files.</p>
<pre><code>$ cat F1
Unix
Linux
Solaris

$ cat F2
Aix
SCO 
</code></pre><p>Sample File4:</p>
<p>Let us update the above file with a header and trailer:</p>
<pre><code>$ cat file4
HEADER
Unix
Linux
Solaris
AIX
SCO
TRAILER
</code></pre><h3 id="9-Split-the-file-at-every-3rd-line-without-the-header-and-trailer-in-the-new-files"><a href="#9-Split-the-file-at-every-3rd-line-without-the-header-and-trailer-in-the-new-files" class="headerlink" title="9. Split the file at every 3rd line without the header and trailer in the new files."></a>9. Split the file at every 3rd line without the header and trailer in the new files.</h3><pre><code>sed &apos;1d;$d;&apos; file4 | awk &apos;NR%3==1{x=&quot;F&quot;++i;}{print &gt; x}&apos; 
</code></pre><p>The earlier command does the work for us, only thing is to pass to the above command without the header and trailer. sed does it for us.  ‘1d’ is to delete the 1st line, ‘$d’ to delete the last line.</p>
<pre><code>$ cat F1
Unix
Linux
Solaris

$ cat F2
AIX
SCO
</code></pre><h3 id="10-Split-the-file-at-every-3rd-line-retaining-the-header-and-trailer-in-every-file"><a href="#10-Split-the-file-at-every-3rd-line-retaining-the-header-and-trailer-in-every-file" class="headerlink" title="10. Split the file at every 3rd line, retaining the header and trailer in every file."></a>10. Split the file at every 3rd line, retaining the header and trailer in every file.</h3><pre><code>$ awk &apos;BEGIN{getline f;}NR%3==2{x=&quot;F&quot;++i;a[i]=x;print f&gt;x;}{print &gt; x END{for(j=1;j&lt;i;j++)print&gt; a[j];}&apos; file4
</code></pre><p>This one is little tricky. Before the file is processed, the first line is read using getline into the variable f. NR%3 is checked with 2 instead of 1 as in the earlier case because since the first line is a header, we need to split the files at 2nd, 5th, 8th lines, and so on. All the file names are stored in the array “a” for later processing.</p>
<p>Without the END label, all the files will have the header record, but only the last file will have the trailer record. So, the END label is to precisely write the trailer record to all the files other than the last file.</p>
<pre><code>$ cat F1
HEADER
Unix
Linux
Solaris
TRAILER

$ cat F2
HEADER
Aix
SCO
TRAILER
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Project - Something Interest]]></title>
      <url>/2016/06/26/something-interesting/</url>
      <content type="html"><![CDATA[<h4 id="This-is-the-summary-of-the-discussion-we-had-this-Friday"><a href="#This-is-the-summary-of-the-discussion-we-had-this-Friday" class="headerlink" title="This is the summary of the discussion we had this Friday."></a>This is the summary of the discussion we had this Friday.</h4><p>(I promise will enhance its appearance in future. :D)</p>
<a id="more"></a>
<p><img src="/images/posts/project/pic.jpg" alt="pic.jpg"></p>
]]></content>
      
        <categories>
            
            <category> framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Split Files in Linux]]></title>
      <url>/2016/06/24/how-to-split-files-in-linux/</url>
      <content type="html"><![CDATA[<p>There are many ways and many commands available to split a file in Linux - by size, by lines or by a certain pattern of the content. Here are some samples.</p>
<a id="more"></a>
<h2 id="SPLIT-Command"><a href="#SPLIT-Command" class="headerlink" title="SPLIT Command"></a>SPLIT Command</h2><h3 id="Usage-of-Split-Command"><a href="#Usage-of-Split-Command" class="headerlink" title="Usage of Split Command"></a>Usage of Split Command</h3><pre><code>a suffix_length
    Use suffix_length letters to form the suffix of the file name.

-b byte_count[k|m]
    Create smaller files byte_count bytes in length.  If ``k&apos;&apos; is appended to the number, the file is split into byte_count kilobyte pieces.  If ``m&apos;&apos; is appended to the number, the file is split into byte_count megabyte pieces.

-l line_count
    Create smaller files n lines in length.
</code></pre><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="Split-File-by-Size"><a href="#Split-File-by-Size" class="headerlink" title="Split File by Size"></a>Split File by Size</h4><p>Take an image as example, its size is 28k and I want to split it into two files and specify the suffix length as 3:</p>
<pre><code>$ split -b 14k -a 3 IMG_0422.jpg

$ ls

IMG_0422.jpg xaaa xaab
</code></pre><p>The prefix of the splits is <code>x</code> by default, but you can designate your own prefix like below:</p>
<pre><code>$ split -b 14k -a 3 IMG_0422.jpg split_

$ ls

IMG_0422.jpg split_aaa split_aab
</code></pre><p>To put all the splits together to restore the original file:</p>
<pre><code>$ cat split_aa* &gt; IMG_0422_copy.jpg
</code></pre><h4 id="Split-File-by-Lines"><a href="#Split-File-by-Lines" class="headerlink" title="Split File by Lines"></a>Split File by Lines</h4><p>Say I have a text file named text.txt which has 20 lines and I want to split it by every 10 lines:</p>
<pre><code>$ split -l 10 -a 1 text.txt split_

$ ls

text.txt split_a split_b
</code></pre><h2 id="AWK-Command"><a href="#AWK-Command" class="headerlink" title="AWK Command"></a>AWK Command</h2><h3 id="Split-by-Content"><a href="#Split-by-Content" class="headerlink" title="Split by Content"></a>Split by Content</h3><p>Say I have a text file named text.txt with below content:</p>
<pre><code>123 a   b
123 c   d
456 e   f
456 g   h
123 i   j
</code></pre><p>And I want to split the file into small pieces by the value of the first column of the file - lines with same value in first column goes into same split file:</p>
<pre><code>$ awk -F\t &apos;{print &gt; $1}&apos; text.txt

$ ls
123 456 text.txt

$ cat 123
123 a   b
123 c   d
123 i   j

$ cat 456
456 e   f
456 g   h
</code></pre><p>There are more samples of using awk command to split a file, which will be introduced by another post <a href="/2016/awk-split-file/">AWK - 10 Examples to Split a File into Multiple Files</a></p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Find]]></title>
      <url>/2016/06/20/linux-find/</url>
      <content type="html"><![CDATA[<p>Usage of find command.</p>
<a id="more"></a>
<pre><code>fine -name     # Find by file name, wild-card is supported
find -amin n   # File was last accessed n minutes ago
find -atime n  # File was last accessed n*24 hours ago
find -mmin n   # File&apos;s data was last modified n minutes ago
find -mtime n  # File&apos;s data was last modified n*24 hours ago
find -cmin n   # File&apos;s status was last changed n minutes ago
find -ctime n  # File&apos;s status was last changed n*24 hours ago
find -type f / find -type d    # Find by file type
find -size     # Find by file size
find -user     # Find files are owned by user uname
find -group gname  # Find files belongs to group gname
</code></pre><p>Find by modified time</p>
<pre><code>find -mtime n
n:  current time - (n + 1) * 24 ~ current time - n * 24
+n: -∞ ~ current time - (n + 1) * 24
-n: current time - n * 24 ~ +∞
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux RPM]]></title>
      <url>/2016/06/14/linux-rpm/</url>
      <content type="html"><![CDATA[<p>Usages of Linux rpm command.</p>
<a id="more"></a>
<pre><code>-ivh: 安装显示安装进度 --install--verbose--hash
-Uvh: 升级软件包 --Update
-qpl: 列出RPM软件包内的文件信息 [Query Package list]
-qpi: 列出RPM软件包的描述信息 [Query Package install package(s)]
-qf:  查找指定文件属于哪个RPM软件包 [Query File]
-Va:  校验所有的RPM软件包，查找丢失的文件 [View Lost]
-e:   删除包
</code></pre><p>Examples:</p>
<pre><code>rpm -q libgcc #查询程序是否安装

rpm -ivh  /var/tmp/libgcc-4.1.2-55.el5.rpm #按路径安装并显示进度
rpm -ivh --relocate /=/opt/libgcc libgcc-4.1.2-55.el5.rpm #指定安装目录

rpm -ivh --test libgcc-4.1.2-55.el5.rpm　#用来检查依赖关系；并不是真正的安装
rpm -Uvh --oldpackage libgcc-4.1.2-55.el5.rpm #新版本降级为旧版本

rpm -qa | grep libgcc #[搜索指定rpm包是否安装]--all 搜索*libgcc*
rpm -ql httpd　#[搜索rpm包] list所有文件安装目录

rpm -qpi Linux-1.4-6.i368.rpm　#[查看rpm包] --query--package--install package信息
rpm -qpf Linux-1.4-6.i368.rpm　#[查看rpm包] --file
rpm -qpR libgcc-4.1.2-55.el5.rpm　#[查看包依赖关系]
rpm2cpio libgcc-4.1.2-55.el5.rpm | cpio -divm #[抽出文件] cpio命令中的-i是提取文件，-d表示根据rpm包中文件原来的路径建立目, -m是保持文件的更新时间, -v是显示处理的文件列表
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Rebasing]]></title>
      <url>/2016/06/10/git-rebasing/</url>
      <content type="html"><![CDATA[<p>In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase. Let’s see what rebasing is.</p>
<a id="more"></a>
<h2 id="The-Basic-Rebase"><a href="#The-Basic-Rebase" class="headerlink" title="The Basic Rebase"></a>The Basic Rebase</h2><p>Like the earlier example from <a href="/2016/git-branching/#basic_merging">Basic Merging</a>, you can see that you diverged your work and made commits on two different branches.</p>
<p><img src="/images/posts/git/basic-rebase-1.png" alt="basic-rebase-1"></p>
<p>The easiest way to integrate the branches, as we’ve already covered, is the <code>merge</code> command. It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit).</p>
<p><img src="/images/posts/git/basic-rebase-2.png" alt="basic-rebase-2"></p>
<p>However, there is another way: you can take the patch of the change that was introduced in C4 and reapply it on top of C3. In Git, this is called <strong><em>rebasing</em></strong>. With the rebase command, you can take all the changes that were committed on one branch and replay them on another one.</p>
<p>In this example, you’d run the following:</p>
<pre><code>$ git checkout experiment

$ git rebase master
</code></pre><p>It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</p>
<p><img src="/images/posts/git/basic-rebase-3.png" alt="basic-rebase-3"></p>
<p>At this point, you can go back to the master branch and do a fast-forward merge.</p>
<pre><code>$ git checkout master

$ git merge experiment
</code></pre><p><img src="/images/posts/git/basic-rebase-4.png" alt="basic-rebase-4"></p>
<p>Now, the snapshot pointed to by C4’ is exactly the same as the one that was pointed to by C5 in the merge example. There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.</p>
<p>Often, you’ll do this to make sure your commits apply cleanly on a remote branch – perhaps in a project to which you’re trying to contribute but that you don’t maintain. In this case, you’d do your work in a branch and then rebase your work onto origin/master when you were ready to submit your patches to the main project. That way, the maintainer doesn’t have to do any integration work – just a fast-forward or a clean apply.</p>
<p>Note that the snapshot pointed to by the final commit you end up with, whether it’s the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot – it’s only the history that is different. Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</p>
<h2 id="More-Interesting-Rebases"><a href="#More-Interesting-Rebases" class="headerlink" title="More Interesting Rebases"></a>More Interesting Rebases</h2><p>You can also have your rebase replay on something other than the rebase target branch. For example. You branched a topic branch (server) to add some server-side functionality to your project, and made a commit. Then, you branched off that to make the client-side changes (client) and committed a few times. Finally, you went back to your server branch and did a few more commits.</p>
<p><img src="/images/posts/git/interesting-rebase-1.png" alt="interesting-rebase-1"></p>
<p>Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it’s tested further. You can take the changes on client that aren’t on server (C8 and C9) and replay them on your master branch by using the –onto option of <code>git rebase</code>:</p>
<pre><code>$ git rebase --onto master server client
</code></pre><p>This basically says, “Check out the client branch, figure out the patches from the common ancestor of the client and server branches, and then replay them onto master.” It’s a bit complex, but the result is pretty cool.</p>
<p><img src="/images/posts/git/interesting-rebase-2.png" alt="interesting-rebase-2"></p>
<p>Now you can fast-forward your master branch:</p>
<pre><code>$ git checkout master

$ git merge client
</code></pre><p><img src="/images/posts/git/interesting-rebase-3.png" alt="interesting-rebase-3"></p>
<p>Let’s say you decide to pull in your server branch as well. You can rebase the server branch onto the <code>master</code> branch without having to check it out first by running <code>git rebase [basebranch] [topicbranch]</code> – which checks out the topic branch (in this case, <code>server</code>) for you and replays it onto the base branch (<code>master</code>):</p>
<pre><code>$ git rebase master server
</code></pre><p>This replays your server work on top of your master work, as shown below:</p>
<p><img src="/images/posts/git/interesting-rebase-4.png" alt="interesting-rebase-4"></p>
<p>Then, you can fast-forward the base branch (master):</p>
<pre><code>$ git checkout master

$ git merge server
</code></pre><p>You can remove the client and server branches because all the work is integrated and you don’t need them anymore, leaving your history for this entire process looking like below:</p>
<pre><code>$ git branch -d client

$ git branch -d server
</code></pre><p><img src="/images/posts/git/interesting-rebase-5.png" alt="interesting-rebase-5"></p>
<h2 id="Rebase-vs-Merge"><a href="#Rebase-vs-Merge" class="headerlink" title="Rebase vs. Merge"></a>Rebase vs. Merge</h2><p>Now that you’ve seen rebasing and merging in action, you may be wondering which one is better. Before we can answer this, let’s step back a bit and talk about what history means.</p>
<p>One point of view on this is that your repository’s commit history is a record of what actually happened. It’s a historical document, valuable in its own right, and shouldn’t be tampered with. From this angle, changing the commit history is almost blasphemous; you’re lying about what actually transpired. So what if there was a messy series of merge commits? That’s how it happened, and the repository should preserve that for posterity.</p>
<p>The opposing point of view is that the commit history is the story of how your project was made. You wouldn’t publish the first draft of a book, and the manual for how to maintain your software deserves careful editing. This is the camp that uses tools like rebase and filter-branch to tell the story in the way that’s best for future readers.</p>
<p>Now, to the question of whether merging or rebasing is better: hopefully you’ll see that it’s not that simple. Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different. Now that you know how both of these things work, it’s up to you to decide which one is best for your particular situation.</p>
<p>In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thread Dump Utility]]></title>
      <url>/2016/06/06/thread-dump-utility/</url>
      <content type="html"><![CDATA[<p>A useful script to dump thread information:</p>
<a id="more"></a>
<pre><code>#!/bin/sh

if [ $# -ne 1 ]; then
  echo &quot;Usages: `basename $0` {PID}&quot; 
  exit -1
else
  RET=`expr match $1 &quot;[0-9]*$&quot;`
  if [ &quot;$RET&quot; -gt 0 ]; then
    echo &quot;Input PID: [$1]&quot;
    PID=$1
  else
    echo &quot;Invalid number: [$1]&quot;
    exit -1
  fi
fi

PROCESS=`ps -p $PID -o args=`

if [ &quot;$PROCESS&quot; = &quot;&quot; ]; then
  echo &quot;PID doesn&apos;t exist on this host!&quot;
  exit -1
fi

JAVA_PATH=`echo $PROCESS | awk &apos;{print $1}&apos;`

if [[ &quot;$JAVA_PATH&quot; =~ &quot;.*java.*&quot; ]]; then
  JDK_PATH=${JAVA_PATH%/*}
else
  echo &quot;Not a java process!&quot;
  exit -1
fi

JSTACK_PATH=$JDK_PATH/jstack

if [ -e $JSTACK_PATH ]; then
  echo &quot;jstack: $JSTACK_PATH&quot;
else
  echo &quot;jstack is not found at $JSTACK_PATH&quot;
  exit -1
fi

HOST=`hostname`

DATETIME=`date &quot;+%Y%m%d_%H%M%S&quot;`

FILE_PATH=/tmp/thread_dump_${HOST}_${PID}_${DATETIME}

echo &quot;Writing thread dump to file $FILE_PATH&quot;

ps H -eo user,pid,ppid,tid,time,%cpu --sort=%cpu | grep $PID &gt; $FILE_PATH

$JSTACK_PATH $PID &gt;&gt; $FILE_PATH

if [ $? = 0 ];then
  echo &quot;Thread dump is done&quot;
else
  echo &quot;Thread dump is failed&quot;
fi
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> thread </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CURL Introduction]]></title>
      <url>/2016/06/03/curl-introduction/</url>
      <content type="html"><![CDATA[<p>CURL is a powerful command in linux to access resources on internet.</p>
<a id="more"></a>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>The simplest format is <code>curl www.google.com</code>, and there are many useful parameters:</p>
<pre><code>--data DATA     HTTP POST data (H)

--form CONTENT  Specify HTTP multipart POST data (H)

-H --header LINE   Pass custom header LINE to server (H)

-I, --head          Show document info only

-i, --include       Include protocol headers in the output (H/F)

-L, --location      Follow redirects (H)

-U, --proxy-user USER[:PASSWORD]  Proxy user and password

-u, --user USER[:PASSWORD]  Server user and password

-v, --verbose       Make the operation more talkative

--trace FILE    Write a debug trace to FILE

--trace-ascii FILE  Like --trace, but without hex output
</code></pre><h2 id="Advanced-Usage"><a href="#Advanced-Usage" class="headerlink" title="Advanced Usage"></a>Advanced Usage</h2><h3 id="Download-Files"><a href="#Download-Files" class="headerlink" title="Download Files"></a>Download Files</h3><pre><code>curl -o [file_name] http://hostname/resource

or 

curl -O http://hostname/resource
</code></pre><h3 id="Upload-a-File-via-Form"><a href="#Upload-a-File-via-Form" class="headerlink" title="Upload a File via Form"></a>Upload a File via Form</h3><pre><code>curl --form &quot;fileupload=@your_file.txt&quot; http://hostname/resource
</code></pre><h3 id="GET-with-Header"><a href="#GET-with-Header" class="headerlink" title="GET with Header"></a>GET with Header</h3><pre><code>curl -H &quot;Accept: application/json&quot; -H &quot;Content-Type: application/json&quot; -X GET http://hostname/resource

curl -H &quot;Accept: application/xml&quot; -H &quot;Content-Type: application/xml&quot; -X GET http://hostname/resource
</code></pre><h3 id="POST-with-Data"><a href="#POST-with-Data" class="headerlink" title="POST with Data"></a>POST with Data</h3><pre><code>curl -X POST --data &quot;param=value&quot; http://hostname/resource

curl -X POST -d @filename http://hostname/resource # read data from file
</code></pre><h3 id="Login-with-User-Credentials"><a href="#Login-with-User-Credentials" class="headerlink" title="Login with User Credentials"></a>Login with User Credentials</h3><pre><code>curl -u username:password http://hostname/resource

or

curl -H &quot;Content-Type: application/x-www-form-urlencoded&quot; --data &quot;username=user&amp;password=passwd&quot; http://hostname/resource   
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> curl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Manipulating Strings in Shell]]></title>
      <url>/2016/05/29/manipulating-strings-in-shell/</url>
      <content type="html"><![CDATA[<p>Linux bash supports a number of string manipulation operations:</p>
<ul>
<li><a href="#string_length">String Length</a></li>
<li><a href="#substring_extraction">Substring Extraction</a></li>
<li><a href="#substring_removal">Substring Removal</a></li>
<li><a href="#substring_replacement">Substring Replacement</a></li>
</ul>
<a id="more"></a>
<h2 id="String-Length"><a href="#String-Length" class="headerlink" title="String Length"></a><a name="string_length"></a>String Length</h2><h3 id="Get-length-of-a-string"><a href="#Get-length-of-a-string" class="headerlink" title="Get length of a string:"></a>Get length of a string:</h3><p><code>${\#string}</code></p>
<p>Example:</p>
<pre><code>binary=&quot;java&quot;
echo ${#binary}
</code></pre><p>Output is: <code>4</code></p>
<h3 id="Get-length-of-a-matching-substring-at-beginning-of-a-string"><a href="#Get-length-of-a-matching-substring-at-beginning-of-a-string" class="headerlink" title="Get length of a matching substring at beginning of a string:"></a>Get length of a matching substring at beginning of a string:</h3><p><code>expr match &quot;$string&quot; &#39;$substring&#39;</code></p>
<p> or</p>
<p> <code>expr &quot;$string&quot; : &#39;$substring&#39;</code></p>
<p>$substring is a regular expression</p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo `expr match &quot;$string&quot; &apos;abc[A-Z]*.2&apos;`

echo `expr &quot;$string&quot; : &apos;abc[A-Z]*.2&apos;`
</code></pre><p>Output is: <code>8</code></p>
<h3 id="Get-index-of-a-substring"><a href="#Get-index-of-a-substring" class="headerlink" title="Get index of a substring"></a>Get index of a substring</h3><p>Index is the numeric position in $string of first character in $substring that matches</p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo `expr index &quot;$string&quot; C12`

echo `expr index &quot;$string&quot; 1c` # &apos;c&apos; matches before &apos;1&apos;
</code></pre><p>Outputs are <code>6</code> and <code>3</code></p>
<h2 id="Substring-Extraction"><a href="#Substring-Extraction" class="headerlink" title="Substring Extraction"></a><a name="substring_extraction"></a>Substring Extraction</h2><h3 id="Extract-substring-from-string-at-position"><a href="#Extract-substring-from-string-at-position" class="headerlink" title="Extract substring from $string at $position"></a>Extract substring from $string at $position</h3><p><code>${string:position}</code></p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo ${string:7}

echo ${string: -4} or echo ${string:(-4)}
</code></pre><p>Outputs are <code>23ABCabc</code> and <code>Cabc</code></p>
<h3 id="Extract-length-characters-of-substring-from-string-at-position"><a href="#Extract-length-characters-of-substring-from-string-at-position" class="headerlink" title="Extract $length characters of substring from $string at $position"></a>Extract $length characters of substring from $string at $position</h3><p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo ${string:7:3}
</code></pre><p>Output is <code>23A</code></p>
<h2 id="Substring-Removal"><a href="#Substring-Removal" class="headerlink" title="Substring Removal"></a><a name="substring_removal"></a>Substring Removal</h2><h3 id="Delete-shortest-match-of-substring-from-front-of-string"><a href="#Delete-shortest-match-of-substring-from-front-of-string" class="headerlink" title="Delete shortest match of $substring from front of $string"></a>Delete shortest match of $substring from front of $string</h3><p><code>${string#substring}</code></p>
<h3 id="Delete-longtest-match-of-substring-from-front-of-string"><a href="#Delete-longtest-match-of-substring-from-front-of-string" class="headerlink" title="Delete longtest match of $substring from front of $string"></a>Delete longtest match of $substring from front of $string</h3><p><code>${string##substring}</code></p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo ${string#a*C}

echo ${string##a*C}
</code></pre><p>Outputs are <code>123ABCabc</code> and <code>abc</code></p>
<h3 id="Delete-shortest-match-of-substring-from-back-of-string"><a href="#Delete-shortest-match-of-substring-from-back-of-string" class="headerlink" title="Delete shortest match of $substring from back of $string"></a>Delete shortest match of $substring from back of $string</h3><p><code>${string%substring}</code></p>
<h3 id="Delete-longest-match-of-substring-from-back-of-string"><a href="#Delete-longest-match-of-substring-from-back-of-string" class="headerlink" title="Delete longest match of $substring from back of $string"></a>Delete longest match of $substring from back of $string</h3><p><code>${string%%substring}</code></p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo ${string%b*c}

echo ${string%%b*c}
</code></pre><p>Outputs are <code>abcABC123ABCa</code> and <code>a</code></p>
<h2 id="Substring-Replacement"><a href="#Substring-Replacement" class="headerlink" title="Substring Replacement"></a><a name="substring_replacement"></a>Substring Replacement</h2><h3 id="Replace-first-match-of-substring-with-replacement"><a href="#Replace-first-match-of-substring-with-replacement" class="headerlink" title="Replace first match of $substring with $replacement"></a>Replace first match of $substring with $replacement</h3><p><code>${string/substring/replacement}</code></p>
<h3 id="Replace-all-matches-of-substring-with-replacement"><a href="#Replace-all-matches-of-substring-with-replacement" class="headerlink" title="Replace all matches of $substring with $replacement"></a>Replace all matches of $substring with $replacement</h3><p><code>${string//substring/replacement}</code></p>
<p>Examples:</p>
<pre><code>string=abcABC123ABCabc

echo ${string/abc/xyz}

echo ${string//abc/xyz}
</code></pre><p>Outputs are <code>xyzABC123ABCabc</code> and <code>xyzABC123ABCxyz</code></p>
<h3 id="If-substring-matches-front-end-of-string-substitute-replacement-for-substring"><a href="#If-substring-matches-front-end-of-string-substitute-replacement-for-substring" class="headerlink" title="If $substring matches front end of $string, substitute $replacement for $substring"></a>If $substring matches front end of $string, substitute $replacement for $substring</h3><p><code>${string/#substring/replacement}</code></p>
<h3 id="If-substring-matches-back-end-of-string-substitute-replacement-for-substring"><a href="#If-substring-matches-back-end-of-string-substitute-replacement-for-substring" class="headerlink" title="If $substring matches back end of $string, substitute $replacement for $substring"></a>If $substring matches back end of $string, substitute $replacement for $substring</h3><p><code>${string/%substring/replacement}</code></p>
<p>Example:</p>
<pre><code>string=abcABC123ABCabc

echo ${string/#abc/XYZ}

echo ${string/%abc/XYZ}
</code></pre><p>Outputs are <code>XYZABC123ABCabc</code> and <code>abcABC123ABCXYZ</code></p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> string </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Search in Jekyll]]></title>
      <url>/2016/05/26/search-in-jekyll/</url>
      <content type="html"><![CDATA[<p>An introduction to use lunr.js for full-text searching in Jekyll blog.</p>
<p>Full-text searching is possible with Jekyll. Client side search is a good technique because it’s fast for small data sets, you don’t need to use a third party and you have complete control of how the results are displayed and what data is searched. However, this method is very slow on large data sets.</p>
<a id="more"></a>
<p>We’ll look at an implementation using lunr.js which is a full-text search engine. Lunr.js performs search client side so we need to populate the data using JSON.</p>
<p>We need to get our data in JSON format. Create /search_data.json with the following content:</p>
<pre><code>{
    { % for post in site.posts % }

    &quot;{ { post.url | slugify } }&quot;: {
      &quot;title&quot;: &quot;{ { post.title | xml_escape } }&quot;,
      &quot;url&quot;: &quot; { { post.url | xml_escape } }&quot;,
      &quot;author&quot;: &quot;{ { post.author | xml_escape } }&quot;,
      &quot;tags&quot;: &quot;{ % for tag in post.tags % }{ { tag } }{ % unless forloop.last % }, { % endunless % }{ % endfor % }&quot;,
      &quot;categories&quot;: &quot;{ % for category in post.categories % }{ { category } }{ % unless forloop.last % }, { % endunless % }{ % endfor % }&quot;,
      &quot;date&quot;: &quot;{ { post.date | xml_escape } }&quot;
    }
    { % unless forloop.last % },{ % endunless % }
    { % endfor %}
}
</code></pre><p>Create search.html. This is the page visitors type their search query into.</p>
<p>You could have the search box in your layout so it’s on every page.</p>
<p>Add this content to search.html:</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
    &lt;form id=&quot;site_search&quot; action=&quot;/search&quot; method=&quot;get&quot; class=&quot;search&quot;&gt;
        &lt;input type=&quot;search&quot; id=&quot;search_box&quot; name=&quot;q&quot; placeholder=&quot;Search...&quot; autocomplete=&quot;off&quot;&gt;
        &lt;ul class=&quot;search-ac&quot; id=&quot;search_results&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Type at least 3 characters to search&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre><p>We’ll also create /js/search.js to hold our search Javascript.</p>
<p>Download the minified version from lunr.js.</p>
<p>Include these files and JQuery and lunr to your pages where js files are imported.</p>
<p>/js/search.js will perform three tasks:</p>
<ul>
<li>Load search data</li>
<li>Search</li>
<li>Display results</li>
</ul>
<p>The content of /js/search.js:</p>
<pre><code>jQuery(function() {
  // Initalize lunr with the fields it will be searching on. I&apos;ve given title
  // a boost of 10 to indicate matches on this field are more important.
  window.idx = lunr(function () {
      this.field(&apos;id&apos;);
    this.field(&apos;title&apos;, { boost: 10 });
    this.field(&apos;date&apos;);
    this.field(&apos;author&apos;);
    this.field(&apos;categories&apos;);
    this.field(&apos;tags&apos;);
  });

  // Download the data from the JSON file we generated
  window.data = $.getJSON(&apos;/search_data.json&apos;);

  // Wait for the data to load and add it to lunr
  window.data.then(function(loaded_data){
    $.each(loaded_data, function(index, value){
      window.idx.add(
        $.extend({ &quot;id&quot;: index }, value)
      );
    });
  });

  $(&quot;#search_box&quot;).unbind(&apos;keypress keyup&apos;)
      .bind(&apos;keypress keyup&apos;, function(e) {
          if ($(this).val().length &lt;=0) {
              var $search_results = $(&quot;#search_results&quot;);
              $search_results.html(&apos;&lt;li&gt;&lt;a&gt;Type at least 3 characters to search&lt;/a&gt;&lt;/li&gt;&apos;);
          }
          if ($(this).val().length &gt;= 3 || e.keyCode == 13) {
          var query = $(&quot;#search_box&quot;).val(); // Get the value for the text field
          var results = window.idx.search(query); // Get lunr to perform a search
          display_search_results(results);
        }
      });

  // Event when the form is submitted
  $(&quot;#site_search&quot;).submit(function(event){
      event.preventDefault();
      var query = $(&quot;#search_box&quot;).val(); // Get the value for the text field
      var results = window.idx.search(query); // Get lunr to perform a search
      display_search_results(results); // Hand the results off to be displayed
  });

  function display_search_results(results) {
    var $search_results = $(&quot;#search_results&quot;);

    // Wait for data to load
    window.data.then(function(loaded_data) {

      // Are there any results?
      if (results.length) {
        $search_results.empty(); // Clear any old results

        // Iterate over the results
        results.forEach(function(result) {
          var item = loaded_data[result.ref];

          // Build a snippet of HTML for this result
          var appendString = &apos;&lt;li&gt;&lt;a href=&quot;&apos; + item.url + &apos;&quot;&gt;&apos; + item.title + &apos;&lt;/a&gt;&lt;/li&gt;&apos;;

          // Add it to the results
          $search_results.append(appendString);
        });
      } else {
        $search_results.html(&apos;&lt;li&gt;&lt;a&gt;No results found&lt;/a&gt;&lt;/li&gt;&apos;);
      }
    });
  }
});
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
            <tag> lunr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TED - Tony Robbins: Why we do, what we do]]></title>
      <url>/2016/05/23/TED-why-we-do-what-we-do/</url>
      <content type="html"><![CDATA[<p>A great article from TED!</p>
<blockquote>
<p><strong>Tony Robbins</strong> discusses the <strong>“invisible forces”</strong> that motivate everyone’s actions — and high-fives Al Gore in the front row.</p>
</blockquote>
<a id="more"></a>
<p><strong>Self-motivate</strong> is very important characters for personal success in long term. Did you experience the moment you feel everything doesn’t work right and whole world against with you? You feel depressed and don’t want get off your bed. </p>
<p>Emotion is very important energy for life. The certainty  thing provide the positive emotion to us include safety and satisfaction, uncertain provide us the anxiety and we used call it problem.</p>
<p>Why we do is the certainty part of our life, and what we do is the way how we should handle the uncertain thing on our way to the goal. </p>
<p>You will get your own answer from Tony Robbins <a href="http://www.ted.com/talks/tony_robbins_asks_why_we_do_what_we_do" target="_blank" rel="external">Why we do what we do</a></p>
]]></content>
      
        <categories>
            
            <category> TED </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TED </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[S.O.L.I.D Principles]]></title>
      <url>/2016/05/19/solid-principals/</url>
      <content type="html"><![CDATA[<p>S.O.L.I.D is an acronym for the <strong>first five object-oriented design principles</strong> by Robert C. Martin, popularly known as Uncle Bob.</p>
<a id="more"></a>
<p>S.O.L.I.D stands for:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Principle</th>
<th style="text-align:center">Description</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SRP</td>
<td style="text-align:center">Single-responsibility Principle</td>
<td>A class should have one and only one reason to change, meaning that a class should have only on job</td>
</tr>
<tr>
<td style="text-align:center">OCP</td>
<td style="text-align:center">Open-closed Principle</td>
<td>Objects or entities should be open for extension, but closed for modification, meaning that a class should be easily extendable without modifying the class itself</td>
</tr>
<tr>
<td style="text-align:center">LSP</td>
<td style="text-align:center">Liskov Substitution Principle</td>
<td>Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T, meaning that every subclass / derived class should be substitutable for their base / parent class</td>
</tr>
<tr>
<td style="text-align:center">ISP</td>
<td style="text-align:center">Interface Segregation Principle</td>
<td>A client should never be forced to implement an interface that is doesn’t use or clients shouldn’t be forced to depend on methods they do not use</td>
</tr>
<tr>
<td style="text-align:center">DIP</td>
<td style="text-align:center">Dependency Inversion Principle</td>
<td>Entities must depend on abstractions not on concretions, meaning that the high level module must not depend on the low level module, but they should depend on abstractions</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> design </tag>
            
            <tag> principles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex in Text Editor]]></title>
      <url>/2016/05/16/regex-in-text-editor/</url>
      <content type="html"><![CDATA[<p>A few tips of Regex which can improve your efficiency on processing texts.</p>
<p>The Regex used here is PCRE.</p>
<a id="more"></a>
<h3 id="Delete-Empty-Lines"><a href="#Delete-Empty-Lines" class="headerlink" title="Delete Empty Lines"></a>Delete Empty Lines</h3><p>Replace <code>^[ \t]*\r\n</code> with empty string</p>
<h3 id="Remove-Heading-Spaces-of-Each-Line"><a href="#Remove-Heading-Spaces-of-Each-Line" class="headerlink" title="Remove Heading Spaces of Each Line"></a>Remove Heading Spaces of Each Line</h3><p>Replace <code>^[ \t]+</code> with empty String</p>
<h3 id="Remove-Trailing-Spaces-of-Each-Line"><a href="#Remove-Trailing-Spaces-of-Each-Line" class="headerlink" title="Remove Trailing Spaces of Each Line"></a>Remove Trailing Spaces of Each Line</h3><p>Replace <code>[ \t]+$</code> with empty string</p>
<h3 id="Add-Words-to-The-Start-of-Each-Line"><a href="#Add-Words-to-The-Start-of-Each-Line" class="headerlink" title="Add Words to The Start of Each Line"></a>Add Words to The Start of Each Line</h3><p>Replace <code>^</code> with words you want to add</p>
<h3 id="Add-Words-to-The-End-of-Each-Line"><a href="#Add-Words-to-The-End-of-Each-Line" class="headerlink" title="Add Words to The End of Each Line"></a>Add Words to The End of Each Line</h3><p>Replace <code>$</code> with words you want to add</p>
<h3 id="Replace-Value-for-a-Tag-in-XML"><a href="#Replace-Value-for-a-Tag-in-XML" class="headerlink" title="Replace Value for a Tag in XML"></a>Replace Value for a Tag in XML</h3><p>For example, If you want replace <code>&lt;XMLTagName&gt;Value&lt;/XMLTagName&gt;</code> with <code>&lt;XMLTagName&gt;Value_New&lt;/XMLTagName&gt;</code></p>
<p>Replace <code>(&lt;XMLTagName&gt;)(.*)(&lt;/XMLTagName&gt;)</code> with <code>$1$2_New$3</code></p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Find Out Your Java Heap Size]]></title>
      <url>/2016/05/16/find-out-your-java-heap-size/</url>
      <content type="html"><![CDATA[<p>In the <a href="http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf" target="_blank" rel="external">oracle memory management whitepaper</a>, it states:</p>
<a id="more"></a>
<blockquote>
<p>On a server-class machine running either JVM (client or server) with the parallel garbage collector, the default<br>initial and maximum heap sizes are</p>
<ul>
<li><p>Initial heap size of 1/64th of the physical memory, up to 1GB. (Note that the minimum initial heap size<br>is 32MB, since a server-class machine is defined to have at least 2GB of memory and 1/64th of 2GB is<br>32MB.)</p>
</li>
<li><p>Maximum heap size of 1/4th of the physical memory, up to 1GB.</p>
</li>
</ul>
</blockquote>
<p>But seems this statement doesn’t hold any longer for modern JVMs.</p>
<p>To find out what is the default max heap size for JDK:</p>
<pre><code>java -XX:+PrintFlagsFinal -version | grep MaxHeapSize
</code></pre><p>To find out the max heap size for your running Java process:</p>
<pre><code>jinfo -flag MaxHeapSize [PID]

jinfo -flags [PID]
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RESTful-API]]></title>
      <url>/2016/05/11/restful-api/</url>
      <content type="html"><![CDATA[<p>Here is an article to introduce what REST is all about.</p>
<a id="more"></a>
<h2 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST(Representational State Transfer)"></a>REST(Representational State Transfer)</h2><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>“表现层”其实指的是”资源”（Resources）的”表现层”。 所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。<br>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。<br>要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。<br>应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化” (State Transfer)。<br>而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。<br>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。<br>它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p>
<table>
<thead>
<tr>
<th>No.</th>
<th>HTTP Method</th>
<th>URI Operation</th>
<th>Operation</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>GET</td>
<td>/UserService/users</td>
<td>Get list of users</td>
<td>Read Only</td>
</tr>
<tr>
<td>2</td>
<td>GET</td>
<td>/UserService/users/1</td>
<td>Get User with Id 1</td>
<td>Read Only</td>
</tr>
<tr>
<td>3</td>
<td>PUT</td>
<td>/UserService/users/2</td>
<td>Update User with Id 2</td>
<td>Idempotent</td>
</tr>
<tr>
<td>3</td>
<td>PATCH</td>
<td>/UserService/users/2</td>
<td>Update partial attribute of User with Id 2</td>
<td>Idempotent</td>
</tr>
<tr>
<td>4</td>
<td>POST</td>
<td>/UserService/users/2</td>
<td>Insert User with Id 2</td>
<td>N/A</td>
</tr>
<tr>
<td>5</td>
<td>DELETE</td>
<td>/UserService/users/1</td>
<td>Delete User with Id 1</td>
<td>Idempotent</td>
</tr>
</tbody>
</table>
<h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>RESTful web services make use of HTTP protocol as a medium of communication between client and server.<br>A client sends a message in form of a HTTP Request and server responds in form of a HTTP Response.<br>This technique is termed as Messaging. These messages contain message data and metadata i.e. information about message itself.<br>Let’s have a look on HTTP Request and HTTP Response messages for HTTP 1.1.</p>
<ul>
<li><p>HTTP Request</p>
<p>  A HTTP Request has five major parts:</p>
<p>  <img src="/images/posts/api/http_request.jpg" alt="request"></p>
<ul>
<li>Verb- Indicate HTTP methods such as GET, POST, DELETE, PUT etc.</li>
<li>URI- Uniform Resource Identifier (URI) to identify the resource on server</li>
<li>HTTP Version- Indicate HTTP version, for example HTTP v1.1 .</li>
<li>Request Header- Contains metadata for the HTTP Request message as key-value pairs. For example, client ( or browser) type, format supported by client, format of message body, cache settings etc.</li>
<li>Request Body- Message content or Resource representation.</li>
</ul>
</li>
</ul>
<ul>
<li><p>HTTP Response</p>
<p>  A HTTP Response has four major parts:</p>
<p>  <img src="/images/posts/api/http_response.jpg" alt="response"></p>
<ul>
<li>Status/Response Code - Indicate Server status for the requested resource. For example 404 means resource not found and 200 means response is ok.</li>
<li>HTTP Version - Indicate HTTP version, for example HTTP v1.1 .</li>
<li>Response Header - Contains metadata for the HTTP Response message as key-value pairs. For example, content length, content type, response date, server type etc.</li>
<li>Response Body - Response message content or Resource representation.</li>
</ul>
</li>
</ul>
<h3 id="Addressing"><a href="#Addressing" class="headerlink" title="Addressing"></a>Addressing</h3><p>Constructing a standard URI</p>
<p>Following are important points to be considered while designing a URI:</p>
<ul>
<li>Use Plural Noun - Use plural noun to define resources. For example, we’ve used users to identify users as a resource.</li>
<li>Avoid using spaces - Use underscore(_) or hyphen(-) when using a long resource name, for example, use authorized_users instead of authorized%20users.</li>
<li>Use lower-case letters - Although URI is case-insensitive, it is good practice to keep url in lower case letters only.</li>
<li>Maintain Backward Compatibility - As Web Service is a public service, a URI once made public should always be available. In case, URI gets updated, redirect the older URI to new URI using HTTP Status code, 300.</li>
<li>Use HTTP Verb - Always use HTTP Verb like GET, PUT, and DELETE to do the operations on the resource. It is not good to use operations names in URI.</li>
</ul>
<h3 id="Statelessness"><a href="#Statelessness" class="headerlink" title="Statelessness"></a>Statelessness</h3><p>As per REST architecture, a RESTful web service should not keep a client state on server.<br>This restriction is called statelessness. It is responsibility of the client to pass its context to server and then server can store this context to process client’s further request.<br>For example, session maintained by server is identified by session identifier passed by the client.</p>
<ul>
<li>Advantages of Statelessness</li>
<li>Web services can treat each method request independently.</li>
<li>Web services need not to maintain client’s previous interactions. It simplifies application design.</li>
<li>As HTTP is itself a statelessness protocol, RESTful Web services work seamlessly with HTTP protocol.</li>
<li>Disadvantages of Statelessness</li>
<li>Web services need to get extra information in each request and then interpret to get the client’s state in case client interactions are to be taken care of.</li>
</ul>
<h3 id="HTTP-Code"><a href="#HTTP-Code" class="headerlink" title="HTTP Code:"></a>HTTP Code:</h3><table>
<thead>
<tr>
<th>NO.</th>
<th>HTTP Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>200 OK</td>
<td>shows success.</td>
</tr>
<tr>
<td>2</td>
<td>201 CREATED</td>
<td>when a resource is successful created using POST or PUT request. Return link to newly created resource using location header.</td>
</tr>
<tr>
<td>3</td>
<td>204 NO CONTENT</td>
<td>when response body is empty for example, a DELETE request.</td>
</tr>
<tr>
<td>4</td>
<td>304 NOT MODIFIED</td>
<td>used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location etc.</td>
</tr>
<tr>
<td>5</td>
<td>400 BAD REQUEST</td>
<td>states that invalid input is provided e.g. validation error, missing data.</td>
</tr>
<tr>
<td>6</td>
<td>401 UNAUTHORIZED</td>
<td>states that user is using invalid or wrong authentication token.</td>
</tr>
<tr>
<td>7</td>
<td>403 FORBIDDEN</td>
<td>states that user is not having access to method being used for example, delete access without admin rights.</td>
</tr>
<tr>
<td>8</td>
<td>404 NOT FOUND</td>
<td>states that method is not available.</td>
</tr>
<tr>
<td>9</td>
<td>409 CONFLICT</td>
<td>states conflict situation while executing the method for example, adding duplicate entry.</td>
</tr>
<tr>
<td>10</td>
<td>500 INTERNAL SERVER ERROR</td>
<td>states that server has thrown some exception while executing the method.</td>
</tr>
</tbody>
</table>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache:"></a>Cache:</h3><p>Caching refers to storing server response in client itself so that a client needs not to make server request for same resource again and again.<br>A server response should have information about how a caching is to be done so that a client caches response for a period of time or never caches the server response.</p>
<p>Following are the headers which a server response can have in order to configure a client’s caching:</p>
<table>
<thead>
<tr>
<th>NO.</th>
<th>Header</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Date</td>
<td>Date and Time of the resource when it was created.</td>
</tr>
<tr>
<td>2</td>
<td>Last Modified</td>
<td>Date and Time of the resource when it was last modified.</td>
</tr>
<tr>
<td>3</td>
<td>Cache-Control</td>
<td>Primary header to control caching.</td>
</tr>
<tr>
<td>4</td>
<td>Expires</td>
<td>Expiration date and time of caching.</td>
</tr>
<tr>
<td>5</td>
<td>Age</td>
<td>Duration in seconds from when resource was fetched from the server.</td>
</tr>
</tbody>
</table>
<p>当资源第一次被访问的时候，HTTP头部如下:</p>
<pre><code>(Request-Line)  GET /a.html HTTP/1.1
Host    127.0.0.1
User-Agent  Mozilla/5.0 (X11; U; Linux i686; zh-CN; rv:1.9.0.15) Gecko/2009102815 Ubuntu/9.04 (jaunty) Firefox/3.0.15
Accept              text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language     zh-cn,zh;q=0.5
Accept-Encoding     gzip,deflate
Accept-Charset      gb2312,utf-8;q=0.7,;q=0.7
Keep-Alive          300
Connection          keep-alive
</code></pre><p>HTTP返回头部如下</p>
<pre><code>(Status-Line)       HTTP/1.1 200 OK
Date                Thu, 26 Nov 2009 13:50:54 GMT
Server              Apache/2.2.11 (Unix) PHP/5.2.9
Last-Modified       Thu, 26 Nov 2009 13:50:19 GMT
Etag                “8fb8b-14-4794674acdcc0″
Accept-Ranges       bytes
Content-Length      20
Keep-Alive          timeout=5, max=100
Connection          Keep-Alive
Content-Type        text/html
</code></pre><p>当资源第一次被访问的时候，http返回200的状态码，并在头部携带上当前资源的一些描述信息，如</p>
<ul>
<li>Last-Modified      // 指示最后修改的时间</li>
<li>Etag                // 指示资源的状态唯一标识</li>
<li>Expires             // 指示资源在浏览器缓存中的过期时间</li>
</ul>
<p>接着浏览器会将文件缓存到Cache目录下，并同时保存文件的上述信息<br>当第二次请求该文件时，浏览器会先检查Cache目录下是否含有该文件，<br>如果有，并且还没到Expires设置的时间，即文件还没有过期，那么此时浏览器将直接从Cache目录中读取文件，而不再发送请求<br>如果文件此时已经过期，则浏览器会发送一次HTTP请求到WebServer，并在头部携带上当前文件的如下信息<br>If-Modified-Since   Thu, 26 Nov 2009 13:50:19 GMT<br>If-None-Match       ”8fb8b-14-4794674acdcc0″<br>即把上一次修改的时间，以及上一次请求返回的Etag值一起发送给服务器。<br>服务器在接收到这个请求的时候，先解析Header里头的信息，然后校验该头部信息。<br>如果该文件从上次时间到现在都没有过修改或者Etag信息没有变化，则服务端将直接返回一个304的状态，而不再返回文件资源，状态头部如下</p>
<pre><code>(Status-Line)       HTTP/1.1 304 Not Modified
Date                Thu, 26 Nov 2009 14:09:07 GMT
Server              Apache/2.2.11 (Unix) PHP/5.2.9
Connection          Keep-Alive
Keep-Alive          timeout=5, max=100
Etag                “8fb8b-14-4794674acdcc0″
</code></pre><h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>As RESTful web services work with HTTP URLs Paths so it is very important to safeguard a RESTful web service in the same manner as a website is be secured. Following are the best practices to be followed while designing a RESTful web service.</p>
<ul>
<li>Validation - Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.</li>
<li>Session based authentication - Use session based authentication to authenticate a user whenever a request is made to a Web Service method.</li>
<li>No sensitive data in URL - Never use username, password or session token in URL , these values should be passed to Web Service via POST method.</li>
<li>Restriction on Method execution - Allow restricted use of methods like GET, POST, DELETE. GET method should not be able to delete data.</li>
<li>Validate Malformed XML/JSON - Check for well formed input passed to a web service method.</li>
<li>Throw generic Error Messages - A web service method should use HTTP error messages like 403 to show access forbidden etc.</li>
</ul>
<p>OAuth for API authentication</p>
<p>OAuth 2.0的运行流程如下图</p>
<p>  <img src="/images/posts/api/oauth_flow.png" alt="oauthFlow"></p>
<pre><code>（A）用户打开客户端以后，客户端要求用户给予授权。
（B）用户同意给予客户端授权。
（C）客户端使用上一步获得的授权，向认证服务器申请令牌。
（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。
（E）客户端使用令牌，向资源服务器申请获取资源。
（F）资源服务器确认令牌无误，同意向客户端开放资源。
</code></pre><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。<br>OAuth 2.0定义了四种授权方式。</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li><p>客户端模式（client credentials）</p>
<p>授权码模式</p>
<p><img src="/images/posts/api/authorization_code.png" alt="authorizationCode"></p>
<p>步骤如下：</p>
<p>（A）用户访问客户端，后者将前者导向认证服务器。<br>（B）用户选择是否给予客户端授权。<br>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。<br>（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。<br>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p>
</li>
</ul>
<p>Introduction of OAuth2 : <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">Oauth2</a><br>Wiki for all status: <a href="http://www.restapitutorial.com/httpstatuscodes.html" target="_blank" rel="external">HTTP STATUS CODE</a></p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> api </tag>
            
            <tag> restful </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Useful SQL]]></title>
      <url>/2016/05/11/useful-sql/</url>
      <content type="html"><![CDATA[<p>A handful SQL which can help you to diagnose your oracle database.</p>
<a id="more"></a>
<h3 id="Find-SQL-That-is-Currently-Running"><a href="#Find-SQL-That-is-Currently-Running" class="headerlink" title="Find SQL That is Currently Running"></a>Find SQL That is Currently Running</h3><pre><code>SELECT A.USERNAME, A.SID, B.SQL_TEXT, B.SQL_FULLTEXT
  FROM V$SESSION A, V$SQLAREA B
 WHERE A.SQL_ADDRESS = B.ADDRESS;
</code></pre><h3 id="Find-Executed-SQL-History"><a href="#Find-Executed-SQL-History" class="headerlink" title="Find Executed SQL History"></a>Find Executed SQL History</h3><pre><code>SELECT S.SAMPLE_TIME,
       SQ.SQL_TEXT,
       SQ.DISK_READS,
       SQ.BUFFER_GETS,
       SQ.CPU_TIME,
       SQ.ROWS_PROCESSED,
       SQ.SQL_FULLTEXT,
       SQ.SQL_ID,
       S.PROGRAM,
       S.MACHINE
  FROM V$SQL SQ, V$ACTIVE_SESSION_HISTORY S
 WHERE S.SQL_ID = SQ.SQL_ID
   AND SQ.SQL_FULLTEXT LIKE &apos;%***%&apos;
 ORDER BY S.SAMPLE_TIME DESC;
</code></pre><h3 id="Find-Top-10-SQL-with-Bad-Performance"><a href="#Find-Top-10-SQL-with-Bad-Performance" class="headerlink" title="Find Top 10 SQL with Bad Performance"></a>Find Top 10 SQL with Bad Performance</h3><pre><code>SELECT *
  FROM
       (SELECT PARSING_USER_ID,
                EXECUTIONS,
                SORTS,
                COMMAND_TYPE,
                DISK_READS,
                SQL_TEXT
           FROM V$SQLAREA
       ORDER BY DISK_READS DESC
       )
 WHERE ROWNUM &lt; 10;
</code></pre><h3 id="Find-SQL-with-Heavy-IO"><a href="#Find-SQL-with-Heavy-IO" class="headerlink" title="Find SQL with Heavy IO"></a>Find SQL with Heavy IO</h3><pre><code>SELECT SE.SID,
       SE.SERIAL#,
       PR.SPID,
       SE.USERNAME,
       SE.STATUS,
       SE.TERMINAL,
       SE.PROGRAM,
       SE.MODULE,
       SE.SQL_ADDRESS,
       ST.EVENT,
       ST. P1TEXT,
       SI.PHYSICAL_READS,
       SI.BLOCK_CHANGES
  FROM V$SESSION SE, V$SESSION_WAIT ST, V$SESS_IO SI, V$PROCESS PR
 WHERE ST.SID = SE.SID
   AND ST. SID = SI.SID
   AND SE.PADDR = PR.ADDR
   AND SE.SID &gt; 6
   AND ST. WAIT_TIME = 0
   AND ST.EVENT NOT LIKE &apos;%SQL%&apos;
 ORDER BY PHYSICAL_READS DESC;
</code></pre><h3 id="Find-Blocks"><a href="#Find-Blocks" class="headerlink" title="Find Blocks"></a>Find Blocks</h3><pre><code>SELECT S1.USERNAME || &apos;@&apos; || S1.MACHINE || &apos; ( SID=&apos; || S1.SID ||
       &apos; )  is blocking &apos; || S2.USERNAME || &apos;@&apos; || S2.MACHINE || &apos; ( SID=&apos; ||
       S2.SID || &apos; ) &apos; AS BLOCKING_STATUS
  FROM V$LOCK L1, V$SESSION S1, V$LOCK L2, V$SESSION S2
 WHERE S1.SID = L1.SID
   AND S2.SID = L2.SID
   AND L1.BLOCK = 1
   AND L2.REQUEST &gt; 0
   AND L1.ID1 = L2.ID1
   AND L2.ID2 = L2.ID2;

SELECT &apos;blocker(&apos; || LB.SID || &apos;:&apos; || SB.USERNAME || &apos;)-sql:&apos; ||
       QB.SQL_TEXT BLOCKERS,
       &apos;waiter (&apos; || LW.SID || &apos;:&apos; || SW.USERNAME || &apos;)-sql:&apos; ||
       QW.SQL_TEXT WAITERS
  FROM V$LOCK LB, V$LOCK LW, V$SESSION SB, V$SESSION SW, V$SQL QB, V$SQL QW
 WHERE LB.SID = SB.SID
   AND LW.SID = SW.SID
   AND SB.PREV_SQL_ADDR = QB.ADDRESS
   AND SW.SQL_ADDRESS = QW.ADDRESS
   AND LB.ID1 = LW.ID1
   AND SW.LOCKWAIT IS NOT NULL
   AND SB.LOCKWAIT IS NULL
   AND LB.BLOCK = 1;

SELECT C.OWNER,
       C.OBJECT_NAME,
       C.OBJECT_TYPE,
       B.USERNAME,
       B.SID,
       B.SERIAL#,
       B.STATUS,
       B.OSUSER,
       B.MACHINE,
       B.PROGRAM,
       B.PROCESS
  FROM V$LOCKED_OBJECT A,
       V$SESSION B,
       ALL_OBJECTS C
 WHERE B.SID       = A.SESSION_ID
   AND A.OBJECT_ID = C.OBJECT_ID;
</code></pre><h3 id="Find-Last-SQL-Executed-By-a-Session"><a href="#Find-Last-SQL-Executed-By-a-Session" class="headerlink" title="Find Last SQL Executed By a Session"></a>Find Last SQL Executed By a Session</h3><pre><code>SELECT
       /*+ ORDERED USE_NL(st) */
       SQL_TEXT  
  FROM V$SESSION SES,
       V$SQLTEXT ST
 WHERE ST.ADDRESS    = SES.SQL_ADDRESS
   AND ST.HASH_VALUE = SES.SQL_HASH_VALUE
   AND SES.USERNAME  = &apos;YOUR_USER_NAME&apos;
ORDER BY PIECE;
</code></pre><h3 id="Find-Foreign-Key-Which-is-Not-Indexed"><a href="#Find-Foreign-Key-Which-is-Not-Indexed" class="headerlink" title="Find Foreign Key Which is Not Indexed"></a>Find Foreign Key Which is Not Indexed</h3><pre><code>SELECT TABLE_NAME
    FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = &apos;FOREIGN_KEY_NAME&apos;
     AND TABLE_NAME NOT IN
         (SELECT TABLE_NAME FROM USER_IND_COLUMNS WHERE COLUMN_NAME = &apos;FOREIGN_KEY_NAME&apos;) ;
</code></pre><h3 id="Recompute-Statistics"><a href="#Recompute-Statistics" class="headerlink" title="Recompute Statistics"></a>Recompute Statistics</h3><pre><code>SELECT &apos;analyze table &apos;||TABLE_NAME||&apos; delete statistics; &apos; FROM USER_TABLES;

SELECT &apos;analyze table &apos;||TABLE_NAME||&apos; compute statistics;&apos; FROM USER_TABLES;

SELECT &apos;alter index &apos;
       || INDEX_NAME
       ||&apos; rebuild tablespace &apos;
       || TABLESPACE_NAME
       ||&apos; compute statistics;&apos;
  FROM USER_INDEXES
 WHERE INDEX_NAME NOT LIKE &apos;SYS%&apos;;

SELECT &apos;alter index &apos;
       ||TABLE_OWNER
       ||&apos;.&apos;
       ||INDEX_NAME
       ||&apos; compute statistics;&apos;
  FROM USER_INDEXES
 WHERE INDEX_NAME NOT LIKE &apos;SYS%&apos;;
</code></pre><h3 id="Test-a-String-for-a-Numeric-Value"><a href="#Test-a-String-for-a-Numeric-Value" class="headerlink" title="Test a String for a Numeric Value"></a>Test a String for a Numeric Value</h3><pre><code>SELECT LENGTH(TRIM(TRANSLATE(&apos;string&apos;, &apos; +-.0123456789&apos;, &apos; &apos;))) from dual;
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven Dependency Mechanism]]></title>
      <url>/2016/05/08/maven-dependency-mechanism/</url>
      <content type="html"><![CDATA[<p>Transitive dependencies are a new feature since Maven 2.0.</p>
<a id="more"></a>
<h2 id="Transitive-Dependencies"><a href="#Transitive-Dependencies" class="headerlink" title="Transitive Dependencies"></a>Transitive Dependencies</h2><p>It allows you to avoid needing to discover and specify the libraries that your own dependencies require, and including them automatically.</p>
<p>There is no limit to the number of the levels that dependencies can be gathered from, and will only cause a problem if a cyclic dependency is discovered.</p>
<p>With transitive dependencies, the graph of included libraries can quickly grow quite large. For this reason, there are some additional features that will limit which dependencies are included:</p>
<ul>
<li><p>Dependency mediation - this determines which version of a dependency will be used when multiple version of an artifact are encountered. Maven supports using the “nearest definition” which means it will use the version of the closest dependency to your project in the tree of dependencies(<em>If two versions are at the same depth in the dependency tree, then it’s the order in the declaration that counts - since Maven 2.0.9</em>). <strong>You can always guarantee a version by declaring it explicitly in your project’s POM.</strong> </p>
</li>
<li><p>Dependency management - version can be specified explicitly in the dependency management section for transitive dependencies.</p>
</li>
<li><p>Dependency scope - this allows you to only include dependencies appropriate for the current stage of the build</p>
</li>
<li><p>Excluded dependencies</p>
</li>
<li><p>Optional dependencies</p>
</li>
</ul>
<h2 id="Dependency-Scope"><a href="#Dependency-Scope" class="headerlink" title="Dependency Scope"></a>Dependency Scope</h2><p>Dependency scope is used to limit the transitivity of a dependency and also affect the classpath used various build tasks.</p>
<p>There are 6 scopes available:</p>
<ul>
<li><p>compile</p>
<p>This is the default scope, used if none is specified. Those dependencies are propagated to dependent projects.</p>
</li>
<li><p>provided</p>
<p>This is much like <code>compile</code>, but indicates you expect the JDK or a container to provide the dependency at runtime. This scope is only available on the compilation and test classpath and is not transitive.</p>
</li>
<li><p>runtime</p>
<p>This scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpath, but not the compile classpath</p>
</li>
<li><p>test</p>
<p>This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phase.</p>
</li>
<li><p>system</p>
<p>This scope is similar to <code>provided</code> except that you have to provide the JAR which contains it explicitly. The artifact is always available and <strong>is not looked up in a repository.</strong></p>
</li>
<li><p>import</p>
<p>This scope is only used on a dependency of type <code>pom</code> in the <code>dependencyManagement</code> section. It indicates that the specified POM should be replaced with the dependencies in that POM’s <code>dependencyManagement</code> section.</p>
</li>
</ul>
<h2 id="Dependency-Scope-Affects-Transitive-Dependencies"><a href="#Dependency-Scope-Affects-Transitive-Dependencies" class="headerlink" title="Dependency Scope Affects Transitive Dependencies"></a>Dependency Scope Affects Transitive Dependencies</h2><p>Each of the scopes (except for <code>import</code>) affects transitive dependencies in different ways, as is demonstrated below. <strong>If a dependency is set to the scope in the left column, transitive dependencies of that dependency with the scope across the top row will result in a dependency in the main project with the scope listed at the interaction. If no scope is listed, it means the dependency will be omitted.</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>compile</th>
<th>provided</th>
<th>runtime</th>
<th>test</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>compile</td>
<td>-</td>
<td>runtime</td>
<td>-</td>
</tr>
<tr>
<td>provided</td>
<td>provided</td>
<td>-</td>
<td>provided</td>
<td>-</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime</td>
<td>-</td>
<td>runtime</td>
<td>-</td>
</tr>
<tr>
<td>test</td>
<td>test</td>
<td>-</td>
<td>test</td>
<td>-</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Create a New User and Grant Permissions in MySQL]]></title>
      <url>/2016/05/07/create-user-and-grant-permissions-in-mysql/</url>
      <content type="html"><![CDATA[<p>This is a brief tutorial about creating user and grant permissions in MySQL</p>
<a id="more"></a>
<h2 id="How-to-Create-a-New-User"><a href="#How-to-Create-a-New-User" class="headerlink" title="How to Create a New User"></a>How to Create a New User</h2><p>Making a new user within the MySQL shell:</p>
<pre><code>CREATE USER &apos;kevin&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password123&apos;;
</code></pre><p>If you want the new user to be able to login from any host:</p>
<pre><code>CREATE USER &apos;kevin&apos; IDENTIFIED BY &apos;password123&apos;;
</code></pre><p>At this point the new user has no permissions to do anything with the database, not even to login. </p>
<p>To grant all privileges on all database to the user:</p>
<pre><code>GRANT ALL PRIVILEGES ON *.* TO &apos;kevin&apos;@&apos;localhost&apos;;
</code></pre><p>Clearly this new user got too big power, if you want to just grant privileges on a specific database to the user:</p>
<pre><code>REVOKE ALL PRIVILEGES ON *.* FROM &apos;kevin&apos;@&apos;localhost&apos;; 

GRANT ALL PRIVILEGES ON wordpress.* TO &apos;kevin&apos;@&apos;localhost&apos;;
</code></pre><p>Instead of granting all privileges, you can also only grant specific permissions:</p>
<ul>
<li>CREATE - allows user to create new tables or databases</li>
<li>DROP - allows user to delete tables or databases</li>
<li>DELETE - allows user to delete rows from tables</li>
<li>INSERT - allows user to insert rows into tables</li>
<li>SELECT - allows user to read through databases</li>
<li>UPDATE - allows user to update table rows</li>
<li>GRANT OPTION - allows user to grant or remove other users’ privileges</li>
</ul>
<p>Once you have finalized the permissions that you want to set up for the user, always be sure to reload all the privileges:</p>
<pre><code>FLUSH PRIVILEGES;
</code></pre><p>Your changes will now be in effect.</p>
<p>To test your new user, log out and log back in with the commands in terminal:</p>
<pre><code>quite

mysql -u kevin -p
</code></pre><p>If you want to delete a user:</p>
<pre><code>DORP USER &apos;kevin&apos;@&apos;localhost&apos;
</code></pre><p>Just list the syntax again:</p>
<pre><code>GRANT [type of permissions] ON [database name].[table name] TO &apos;[username]&apos;@&apos;[hostname]&apos;

REVOKE [type of permissions] on [database name].[table name] FROM &apos;[username]&apos;@&apos;[hostname]&apos;

DROP USER &apos;[username]&apos;@;&apos;[hostname]&apos;
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Do You Know These Windows Shortcuts]]></title>
      <url>/2016/05/05/windows-shortcut/</url>
      <content type="html"><![CDATA[<p>Shortcuts can ease your life</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>Keys</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>F1</code></td>
<td>Display Windows Help</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>L</code></td>
<td>Lock the keyboard</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>R</code></td>
<td>Open the Run dialog box</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>U</code></td>
<td>Open Utility Manager</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>D</code></td>
<td>Display the desktop</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>M</code></td>
<td>Minimize all of the windows</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>E</code></td>
<td>Open My Computer</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>F</code></td>
<td>Search for a file or a folder</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>Shift</code> + <code>M</code></td>
<td>Restore the min windows</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>Space</code></td>
<td>Preview the desktop</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>→</code></td>
<td>Maximize the window to the left side of the screen</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>←</code></td>
<td>Maximize the window to the right side of the screen</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> +  <code>↓</code></td>
<td>Minimize the window</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>↑</code></td>
<td>Maximize the window</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>Home</code></td>
<td>Minimize all but the active window</td>
</tr>
<tr>
<td><img src="/images/posts/windows/win10.jpg" alt="winlogo"> + <code>Shift</code> + <code>←</code> or <code>→</code></td>
<td>Move a window from one monitor to another</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PCRE - Perl Compatible Regular Expression]]></title>
      <url>/2016/05/05/perl-compatible-regex/</url>
      <content type="html"><![CDATA[<p>A list of PCRE syntax:</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，「<code>n</code>」匹配字符「<code>n</code>」。「<code>\n</code>」匹配一个换行符。序列「<code>\\</code>」匹配「<code>\</code>」而「<code>\(</code>」则匹配「<code>(</code>」。</td>
</tr>
<tr>
<td><code>^</code></td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，<code>^</code>也匹配「<code>\n</code>」或「<code>\r</code>」之后的位置。</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，<code>$</code>也匹配「<code>\n</code>」或「<code>\r</code>」之前的位置。</td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配前面的子表达式零次或多次。例如，「<code>zo*</code>」能匹配「<code>z</code>」以及「<code>zoo</code>」。<code>*</code>等价于<code>{0,}</code>。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次。例如，「<code>zo+</code>」能匹配「<code>zo</code>」以及「<code>zoo</code>」，但不能匹配「<code>z</code>」。<code>+</code>等价于<code>{1,}</code>。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前面的子表达式零次或一次。例如，「<code>do(es)?</code>」可以匹配「<code>do</code>」或「<code>does</code>」中的「<code>do</code>」。<code>?</code>等价于<code>{0,1}</code>。</td>
</tr>
<tr>
<td><code>{n}</code></td>
<td>n是一个非负整数。匹配确定的n次。例如，「<code>o{2}</code>」不能匹配「<code>Bob</code>」中的「<code>o</code>」，但是能匹配「<code>food</code>」中的两个<code>o</code>。</td>
</tr>
<tr>
<td><code>{n,}</code></td>
<td>n是一个非负整数。至少匹配n次。例如，「<code>o{2,}</code>」不能匹配「<code>Bob</code>」中的「<code>o</code>」，但能匹配「<code>foooood</code>」中的所有o。「<code>o{1,}</code>」等价于「<code>o+</code>」。「<code>o{0,}</code>」则等价于「<code>o\*</code>」。</td>
</tr>
<tr>
<td><code>{n,m}</code></td>
<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，「<code>o{1,3}</code>」将匹配「<code>fooooood</code>」中的前三个<code>o</code>。「<code>o{0,1}</code>」等价于「<code>o?</code>」。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>当该字符紧跟在任何一个其他限制符（<code>*,+,?，{n}，{n,}，{n,m}</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串「<code>oooo</code>」，「<code>o+?</code>」将匹配单个「<code>o</code>」，而「<code>o+</code>」将匹配所有「<code>o</code>」。</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配除「<code>\n</code>」之外的任何单个字符。要匹配包括「<code>\n</code>」在内的任何字符，请使用像「`(.</td>
<td>\n)`」的模式。</td>
</tr>
<tr>
<td><code>(pattern)</code></td>
<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括號字符，请使用「<code>(</code>」或「<code>)</code>」。</td>
</tr>
<tr>
<td><code>(?:pattern)</code></td>
<td>匹配pattern但不获取匹配的子字符串，也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用。这在使用或字符「`(</td>
<td>)<code>」来组合一个模式的各个部分是很有用。例如「</code>industr(?:y</td>
<td>ies)<code>」就是一个比「</code>industry</td>
<td>industries`」更简略的表达式。</td>
</tr>
<tr>
<td><code>(?=pattern)</code></td>
<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，「`Windows(?=95</td>
<td>98</td>
<td>NT</td>
<td>2000)<code>」能匹配「</code>Windows2000<code>」中的「</code>Windows<code>」，但不能匹配「</code>Windows3.1<code>」中的「</code>Windows`」。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td><code>(?!pattern)</code></td>
<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如「`Windows(?!95</td>
<td>98</td>
<td>NT</td>
<td>2000)<code>」能匹配「</code>Windows3.1<code>」中的「</code>Windows<code>」，但不能匹配「</code>Windows2000<code>」中的「</code>Windows`」。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
</tr>
<tr>
<td><code>(?&lt;=pattern)</code></td>
<td>反向肯定预查，与正向肯定预查类似，只是方向相反。例如，「`(?&lt;=95</td>
<td>98</td>
<td>NT</td>
<td>2000)Windows<code>」能匹配「</code>2000Windows<code>」中的「</code>Windows<code>」，但不能匹配「</code>3.1Windows<code>」中的「</code>Windows`」。</td>
</tr>
<tr>
<td><code>(?&lt;!pattern)</code></td>
<td>反向否定预查，与正向否定预查类似，只是方向相反。例如「`(?&lt;!95</td>
<td>98</td>
<td>NT</td>
<td>2000)Windows<code>」能匹配「</code>3.1Windows<code>」中的「</code>Windows<code>」，但不能匹配「</code>2000Windows<code>」中的「</code>Windows`」。</td>
</tr>
<tr>
<td>`x</td>
<td>y`</td>
<td>匹配x或y。例如，「`z</td>
<td>food<code>」能匹配「</code>z<code>」或「</code>food<code>」。「</code>(z</td>
<td>f)ood<code>」则匹配「</code>zood<code>」或「</code>food`」。</td>
</tr>
<tr>
<td><code>[xyz]</code></td>
<td>字符集合（character class）。匹配所包含的任意一个字符。例如，「<code>[abc]</code>」可以匹配「<code>plain</code>」中的「<code>a</code>」。特殊字符仅有反斜线<code>\</code>保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符<code>^</code>如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。</td>
</tr>
<tr>
<td><code>[^xyz]</code></td>
<td>排除型（negate）字符集合。匹配未列出的任意字符。例如，「<code>[^abc]</code>」可以匹配「<code>plain</code>」中的「<code>plin</code>」。</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>字符范围。匹配指定范围内的任意字符。例如，「<code>[a-z]</code>」可以匹配「<code>a</code>」到「<code>z</code>」范围内的任意小写字母字符。</td>
</tr>
<tr>
<td><code>[^a-z]</code></td>
<td>排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，「<code>[^a-z]</code>」可以匹配任何不在「<code>a</code>」到「<code>z</code>」范围内的任意字符。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，「<code>er\b</code>」可以匹配「<code>never</code>」中的「<code>er</code>」，但不能匹配「<code>verb</code>」中的「<code>er</code>」。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>匹配非单词边界。「<code>er\B</code>」能匹配「<code>verb</code>」中的「<code>er</code>」，但不能匹配「<code>never</code>」中的「<code>er</code>」。</td>
</tr>
<tr>
<td><code>\cx</code></td>
<td>匹配由<code>x</code>指明的控制字符。例如，<code>\cM</code>匹配一个<code>Control-M</code>或回车符。x的值必须为<code>A-Z</code>或<code>a-z</code>之一。否则，将<code>c</code>视为一个原义的「<code>c</code>」字符。</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>匹配一个数字字符。等价于<code>[0-9]</code>。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配一个非数字字符。等价于<code>[^0-9]</code>。</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>匹配一个换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>匹配一个换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>匹配一个回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配包括下划线的任何单词字符。等价于「<code>[A-Za-z0-9_]</code>」。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配任何非单词字符。等价于「<code>[^A-Za-z0-9_]</code>」。</td>
</tr>
<tr>
<td><code>\xn</code></td>
<td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，「<code>\x41</code>」匹配「<code>A</code>」。「<code>\x041</code>」则等价于「<code>\x04&amp;1</code>」。正則表达式中可以使用ASCII编码。</td>
</tr>
<tr>
<td><code>\num</code></td>
<td>向后引用（back-reference）一个子字符串（substring），该子字符串与正则表达式的第num个用括号围起来的子表达式（subexpression）匹配。其中<code>num</code>是从<code>1</code>开始的正整数，其上限可能是99。例如：「<code>(.)\1</code>」匹配两个连续的相同字符。</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>标识一个八进制转义值或一个向后引用。如果<code>\n</code>之前至少<code>n</code>个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（<code>0-7</code>），则<code>n</code>为一个八进制转义值。</td>
</tr>
<tr>
<td><code>\nm</code></td>
<td>标识一个八进制转义值或一个向后引用。如果<code>\nm</code>之前至少有nm个获得子表达式，则<code>nm</code>为向后引用。如果<code>\nm</code>之前至少有n个获取，则<code>n</code>为一个后跟文字<code>m</code>的向后引用。如果前面的条件都不满足，若<code>n</code>和<code>m</code>均为八进制数字（<code>0-7</code>），则<code>\nm</code>将匹配八进制转义值<code>nm</code>。</td>
</tr>
<tr>
<td><code>\nml</code></td>
<td>如果n为八进制数字（<code>0-3</code>），且<code>m</code>和<code>l</code>均为八进制数字（<code>0-7</code>），则匹配八进制转义值<code>nml</code>。</td>
</tr>
<tr>
<td><code>\un</code></td>
<td>匹配n，其中<code>n</code>是一个用四个十六进制数字表示的Unicode字符。例如，<code>\u00A9</code>匹配版权符号（<code>©</code>）。</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex - Delete Lines Does not Contain Certain Keyword]]></title>
      <url>/2016/05/04/delete-lines-does-not-contain-a-keyword/</url>
      <content type="html"><![CDATA[<p>The fact that regex doesn’t support inverse matching is not entirely true. You can mimic this behavior by using negative look-arounds:</p>
<a id="more"></a>
<pre><code>^((?!gold).)*$
</code></pre><p>The regex above will match any string, or line without a line break, not containing the (sub) string <code>&quot;gold&quot;</code>. As mentioned, this is not something regex is “good” at (or should do), but still, it is possible.</p>
<p>And if you need to match line break chars as well, use the DOT-ALL modifier (the trailing s in the following pattern):</p>
<pre><code>/^((?!gold).)*$/s
</code></pre><p>or use it inline:</p>
<pre><code>/(?s)^((?!gold).)*$/
</code></pre><p>(where the /…/ are the regex delimiters, i.e. not part of the pattern)</p>
<p>If the DOT-ALL modifier is not available, you can mimic the same behavior with the character class [\s\S]:</p>
<pre><code>/^((?!gold)[\s\S])*$/
</code></pre><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>A string is just a list of n characters. Before and after each character, there’s an empty string. So a list of n characters will have n+1 empty strings. Consider the string “ABgoldCD”:</p>
<pre><code>    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+
S = |e1| A |e2| B |e3| g |e4| o |e5| l |e6| d |e7| C |e8| D |e9|
    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+

index    0      1      2      3      4      5      6      7
</code></pre><p>where the e’s are the empty strings. The regex (?!gold). looks ahead to see if there’s no substring <code>&quot;gold&quot;</code> to be seen, and if that is the case (so something else is seen), then the . (dot) will match any character except a line break. Look-arounds are also called zero-width-assertions because they don’t consume any characters. They only assert/validate something.</p>
<p>So, in my example, every empty string is first validated to see if there’s no <code>&quot;gold&quot;</code> up ahead, before a character is consumed by the . (dot). The regex (?!gold). will do that only once, so it is wrapped in a group, and repeated zero or more times: <code>((?!gold).)*.</code> Finally, the start- and end-of-input are anchored to make sure the entire input is consumed: <code>^((?!gold).)*$</code></p>
<p>As you can see, the input “ABgoldCD” will fail because on e3, the regex (?!gold) fails (there is <code>&quot;gold&quot;</code> up ahead!).</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Validate Inputs in Shell Script]]></title>
      <url>/2016/04/30/validate-inputs-in-shell/</url>
      <content type="html"><![CDATA[<p>When you create a shell script which requires some parameters as inputs, it is necessary to validate the parameters are recognizable by the script.</p>
<a id="more"></a>
<ul>
<li><p>Validate parameter to be a date</p>
<pre><code>RET=`date -d $1 &quot;+%Y%m%d&quot; 2&gt;/dev/null`
if [ $? = 0 ]; then
    echo &quot;Input date: [$RET]&quot;
else
    echo &quot;Invalid date: [$1]&quot;
    exit -1
fi
</code></pre></li>
<li><p>Validate parameter to be a number</p>
<pre><code>RET=`expr match $1 &quot;[0-9]*$&quot;`
if [ &quot;$RET&quot; -gt 0 ]; then
    echo &quot;Input number: [$RET]&quot;
else
    echo &quot;Invalid number: [$1]&quot;
    exit -1
fi
</code></pre></li>
<li><p>Validate total parameters count</p>
<pre><code>if [ $# -lt 2 ]; then
    echo &quot;Usage: `basename $0` {PARAM1} {PARAM2} [OPTIONAL_PARAM]
    exit -1
fi
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Create Restricted User for SSH Tunneling]]></title>
      <url>/2016/04/27/create-restricted-user-for-ssh/</url>
      <content type="html"><![CDATA[<p>For safety purpose, you can create a user without login for SSH tunneling.</p>
<p>Such user won’t have access to login the system and don’t have a home folder either. The only thing this user can do is changing the login password.</p>
<a id="more"></a>
<p>Commands to create a restricted user for SSH tunneling:</p>
<pre><code>#Create user
useradd -M -s /sbin/nologin -n username

#Modify password
passwd username

#Remove the user
userdel -r username
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Recipe - Jiang Niu Rou]]></title>
      <url>/2016/04/23/recipe-beff-stew/</url>
      <content type="html"><![CDATA[<p>程序员的菜单: 酱牛肉</p>
<a id="more"></a>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><em>前言</em></h4><p><strong>这次红字写在前头。鄙人自诩文人，比起本着纯良之匠心传达给大家高超技艺和美味佳肴，我更爱好传递精神污染。要是觉着我的方子能吃能做，但是废话太长不看，您就直接往下拉，千万甭犹豫，拉到出现图了下头就是菜谱。要是再碰见我说东他说西的直接请出去。</strong></p>
<blockquote>
<p><strong>电</strong>视剧里常看古代英雄侠客，坐在酒肆客栈之中，要上一盘酱牛肉，就着二两白酒议论刀剑江湖，好不快哉。牛肉本身含有丰富的蛋白质，维生素B6，锌，铁，氨基酸等营养成分，比猪肉更能满足人体健康的需要。中医认为牛肉主消渴，止泄，安中益气，养脾胃。消水肿，除湿气，补虚，令人强筋骨、壮健，有强身健体的功效。酱牛肉咸鲜浓郁，不肥不瘦，不柴不腻，口感丰厚，经常被切成片状当做下酒菜来食用。冬天食用酱牛肉还有暖胃驱寒的功效，是冬季进补的佳品。这是一道蒙古特色的传统菜，由于北京地区多以回族同胞经营牛羊肉，在本地以回民制的酱牛肉最为知名。</p>
<p><strong>清</strong>《京师坊巷志》中，有“户部门羊肉肆，五香酱羊肉名天下”的记载，指的就是月盛斋，可见其名气之大。道光年间曾有人写诗加以赞美：喂羊肥嫩数京中，采用清汤色煮红，日午烧来焦且烂，喜无膻味腻喉咙。”民国初年，《道咸以来朝野杂记》中也写道：“正阳门内户部街路东月盛斋所制五香酱牛羊肉，为北平第一，外埠所销甚广。”这说的就是北京月盛斋马家老铺的酱牛羊肉。</p>
<p><strong>月</strong>盛斋是马庆瑞于清乾隆40年创办的，开业于清乾隆(公元一七七五年)距今已有两百多年的历史，是京城著名的老字号。除了月盛斋，早年间还有一间复顺斋刘家老铺很是有名气，在现代通俗文学巨匠张恨水的作品中曾提到门框胡同依次往北，有复顺斋酱牛肉、年糕王、豌豆黄宛等等诸多小吃店家，他和很多食客同样挤进胡同，听着京腔京韵的吆喝声，找到想吃的小吃摊前，挤坐在大条板凳上大吃一气，吃得腰圆肚饱周身流汗才不舍的离去。如今物是人非，这复顺斋已然不在了，月盛斋还在，位于前门大街路西，经过公私合营和多年体制改革，早已转型做了多种熟食制品的制造和供应。想现场品尝月盛斋酱牛肉的朋友可以前往北京市西城区大栅栏商业街门框胡同三益楼美食汇内，不是本地的朋友，您也可以购买真空包装的熟食制品回家品尝。</p>
<p><strong>但</strong>真空包装始终是真空包装，和现做现吃始终是差点什么。小时奶奶常购回家中的一种塑封牛肉制品“平遥牛肉”曾是我的一大好物，而当我高考完的暑假去了一趟山西本地，才知道味道是那个味道，口感则与当地所制一个天上一个地下。为了报答肘子贴里诸位的抬爱，这次我话不多说，拿出一个传统的五香酱牛肉方子和大家分享。海外游子或是有意在家中自行制作熟食制品的朋友不妨一试。</p>
</blockquote>
<p><a href="http://bbs.nga.cn/read.php?&amp;tid=9210107" target="_blank" rel="external">来源 Click To Jump</a></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>主要食材</td>
<td></td>
<td></td>
</tr>
<tr>
<td>牛腱子肉</td>
<td>1500g</td>
<td><strong>酱牛肉一般选用带花筋的前腿腱子！</strong>不常下厨房的人注意了，牛后腿绝对不是跟猪后腿一样就是大，牛后腿非常硬，里面没有花筋，不适合制作熟食。你也可以选择在一锅内加入牛肚、蹄筋等一起酱。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>烹饪器具</td>
<td></td>
<td></td>
</tr>
<tr>
<td>28cm汤锅</td>
<td>一个</td>
<td>问加水多少的看好：可以放3/4锅水，水多了往外舀一点留着备用。</td>
</tr>
<tr>
<td>炒锅</td>
<td>一个</td>
<td>炒酱用。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>配料</td>
<td></td>
<td></td>
</tr>
<tr>
<td>黄酱</td>
<td>1包</td>
<td>需炒制</td>
</tr>
<tr>
<td>肉蔻</td>
<td>2个</td>
<td>香料，<strong>如果你嫌麻烦，有个东西叫王守义炖肉料，拿两包配上两根桂皮一把花椒，一样用。</strong></td>
</tr>
<tr>
<td>砂仁</td>
<td>2g</td>
<td>香料</td>
</tr>
<tr>
<td>白豆蔻</td>
<td>2g</td>
<td>香料</td>
</tr>
<tr>
<td>茴香</td>
<td>2g</td>
<td>香料</td>
</tr>
<tr>
<td>桂皮</td>
<td>两大根</td>
<td>香料</td>
</tr>
<tr>
<td>花椒</td>
<td>约30粒</td>
<td>香料</td>
</tr>
<tr>
<td>丁香</td>
<td>1g</td>
<td>香料</td>
</tr>
<tr>
<td>干山楂</td>
<td>随便</td>
<td>香料</td>
</tr>
<tr>
<td>盐</td>
<td>酌量</td>
<td>嫌不咸你使劲加。</td>
</tr>
<tr>
<td>北京酱油</td>
<td>60g</td>
<td>4汤勺。品牌有金狮、老才臣、和田宽等。没有可以用浓口日本酱油，普通黄豆酱油，加了生抽老抽各种抽味道是不对的。实在没有就多搁盐和酱。</td>
</tr>
<tr>
<td>姜</td>
<td>三四片</td>
</tr>
</tbody>
</table>
<h4 id="制作方法"><a href="#制作方法" class="headerlink" title="制作方法"></a>制作方法</h4><ul>
<li>牛前腱横切成8cm大小的块，有的食谱这一步是抹上黄酱腌，太麻烦了，我们直接把这个牛肉块下水焯两遍，去血沫。</li>
</ul>
<ul>
<li>另起一油锅，锅内放油，依次放入葱姜和花椒10粒大料一个，将黄酱炒出香味。火不能大，否则酱炒出来会苦。</li>
</ul>
<ul>
<li>起一锅，加水至放入肉后没过第一个指节，加入全部配料、肉块和炒香的黄酱。</li>
</ul>
<ul>
<li>烧开锅，大火一小时三十分钟后转小火慢慢炖2~N个小时不限，如果是带纯牛筋或者给老人吃就要多炖会儿。</li>
</ul>
<ul>
<li>如偏爱重口味，请泡一宿，第二天早晨起来倍儿咸，不要往汤里加太多盐，汤会发苦。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
            <tag> recipe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Branching]]></title>
      <url>/2016/04/22/git-branching/</url>
      <content type="html"><![CDATA[<p>Git Branches in a Nutshell</p>
<a id="more"></a>
<h2 id="Branches-in-a-Nutshell"><a href="#Branches-in-a-Nutshell" class="headerlink" title="Branches in a Nutshell"></a>Branches in a Nutshell</h2><p>What does Git do when you make a commit? Git stores a commit object that contains a pointer to the snapshot of the content you staged.</p>
<p>This commit object contains the author’s name and email, the message that you typed and pointers to the commit or commits that directly came before this commit.</p>
<p>Let’s take an example:</p>
<pre><code>$ git add REAME.md FAQ.md LICENSE
$ git commit -m &quot;The initial commit of my project&quot;
</code></pre><p>After running <code>git commit</code>, Git checksums each subdirectory and stores those tree objects in the Git repository. Now your Git repository has 5 objects: one blob for each of your 3 files, one tree that lists the contents of the directory and specifies which file names are stored as which blob, and one commit with the pointer to that root tree and all the commit metadata.</p>
<p><img src="/images/posts/git/commit-and-tree.png" alt="commit-and-tree"></p>
<p>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</p>
<p><img src="/images/posts/git/commits-and-parents.png" alt="commits-and-parents"></p>
<p><strong>A branch in Git is simply a lightweight movable pointer to one of these commits.</strong> The default branch name is <code>master</code>. Every time you commit, it moves forward automatically.</p>
<p><img src="/images/posts/git/branch-and-history.png" alt="branch-and-history"></p>
<h3 id="Creating-a-New-Branch"><a href="#Creating-a-New-Branch" class="headerlink" title="Creating a New Branch"></a>Creating a New Branch</h3><p>What happens if you create a new branch? Well, doing so <strong>creates a new pointer</strong> for you to move around. Let’s say you create a new branch called testing. You do this with the <code>git branch</code> command:</p>
<pre><code>$ git branch testing
</code></pre><p>This creates a new pointer to the same commit you’re currently on.</p>
<p><img src="/images/posts/git/two-branches.png" alt="two-branches"></p>
<p>How does Git know what branch you’re currently on? It keeps a special pointer called <code>HEAD</code>. Note that this is a lot different than the concept of <code>HEAD</code> in other VCSs you may be used to, such as Subversion or CVS. In Git, this is a pointer to the local branch you’re currently on. In this case, you’re still on master. The git branch command only created a new branch – it didn’t switch to that branch.</p>
<p><img src="/images/posts/git/head-to-master.png" alt="head-to-master"></p>
<p>You can check which branch you are on by:</p>
<pre><code>$ git log --oneline --decorate

or

$ git status

or 

$ git branch
</code></pre><h3 id="Switching-Branches"><a href="#Switching-Branches" class="headerlink" title="Switching Branches"></a>Switching Branches</h3><p>To switch to the new testing branch:</p>
<pre><code>$ git checkout testing
</code></pre><p>This moves <code>HEAD</code> to point to the <code>testing</code> branch.</p>
<p><img src="/images/posts/git/head-to-testing.png" alt="head-to-testing"></p>
<p>When you made some changes on testing branch and committed your changes and switch back to master branch:</p>
<pre><code>$ git checkout master
</code></pre><p>That command did two things. It moved the <code>HEAD</code> pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to. This also means the changes you make from this point forward will diverge from an older version of the project. It essentially rewinds the work you’ve done in your testing branch so you can go in a different direction.</p>
<p>It’s important to note that when you switch branches in Git, files in your working directory will change. If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it cleanly, it will not let you switch at all.</p>
<p>When you keep switching and changing between the two branches, you project will diverge:</p>
<p><img src="/images/posts/git/advance-master.png" alt="advance-master"></p>
<p>You can also see this easily with <code>git log</code> command:</p>
<pre><code>$ git log --oneline --decorate --graph --all
</code></pre><h2 id="Basic-Merging"><a href="#Basic-Merging" class="headerlink" title=" Basic Merging"></a><a name="basic_merging"></a> Basic Merging</h2><p>First, let’s say you’re working on your project and have a couple commits already.</p>
<p><img src="/images/posts/git/basic-branching-1.png" alt="basic-branching-1"></p>
<p>You’ve decided that you’re going to work on issue #53 in whatever issue-tracking system your company uses. To create a branch and switch to it at the same time, you can run the <code>git checkout</code> command with the <code>-b</code> switch:</p>
<pre><code>$ git checkout -b iss53
Switched to a new branch &quot;iss53&quot;
</code></pre><p>This is shorthand for:</p>
<pre><code>$ git branch iss53
$ git checkout iss53
</code></pre><p>After fixing issue #53 and do some commits. Doing so moves the <code>iss53</code> branch forward:</p>
<p><img src="/images/posts/git/basic-branching-3.png" alt="basic-branching-3"></p>
<p>Now you get the call that there is a urgent issue, and you need to fix it immediately. With Git, you don’t have to deploy your fix along with the iss53 changes you’ve made, and you don’t have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production. All you have to do is switch back to your master branch and create a new hotfix branch:</p>
<pre><code>$ git checkout master

$ git checkout -b hotfix
</code></pre><p>After the hotfix and do some commits:</p>
<p><img src="/images/posts/git/basic-branching-4.png" alt="basic-branching-4"></p>
<p>You can run your tests, make sure the hotfix is what you want, and merge it back into your master branch to deploy to production. You do this with the git merge command:</p>
<pre><code>$ git checkout master

$ git merge hotfix
</code></pre><p>You’ll notice the phrase “fast-forward” in that merge. Because the commit C4 pointed to by the branch hotfix you merged in was directly ahead of the commit C2 you’re on, Git simply moves the pointer forward.</p>
<p><img src="/images/posts/git/basic-branching-5.png" alt="basic-branching-5"></p>
<p>After your super-important fix is deployed, you’re ready to switch back to the work you were doing before you were interrupted. However, first you’ll delete the hotfix branch, because you no longer need it – the master branch points at the same place. You can delete it with the <code>-d</code> option to <code>git branch</code>:</p>
<pre><code>$ git branch -d hotfix
</code></pre><p>If you want to delete a remote branch, use below command:</p>
<pre><code>$ git push origin --delete &lt;branch_name&gt;
</code></pre><p>Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.</p>
<pre><code>$ git checkout iss53
</code></pre><p>After some subsequent changes and commits for issue #53:</p>
<p><img src="/images/posts/git/basic-branching-6.png" alt="basic-branching-6"></p>
<p>Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your master branch. In order to do that, you’ll merge your <code>iss53</code> branch into <code>master</code>, much like you merged your <code>hotfix</code> branch earlier. All you have to do is check out the branch you wish to merge into and then run the <code>git merge</code> command:</p>
<pre><code>$ git checkout master

$ git merge iss53
</code></pre><p>This looks a bit different than the <code>hotfix</code> merge you did earlier. In this case, your development history has diverged from some older point. Because the commit on the branch you’re on isn’t a direct ancestor of the branch you’re merging in, Git has to do some work. In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.</p>
<p><img src="/images/posts/git/basic-merging-1.png" alt="basic-merging-1"></p>
<p>Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it. This is referred to as a merge commit, and is special in that it has more than one parent.</p>
<p><img src="/images/posts/git/basic-merging-2.png" alt="basic-merging-2"></p>
<h3 id="Branch-Management"><a href="#Branch-Management" class="headerlink" title="Branch Management"></a>Branch Management</h3><p>To show your current branches:</p>
<pre><code>$ git branch
</code></pre><p>Branch name with a prefix <code>*</code> is the current branch you are on.</p>
<p>To see the last commit on each branch, you can run:</p>
<pre><code>$ git branch -v
</code></pre><p>The useful <code>--merged</code> and <code>--no-merged</code> options can filter this list to branches that you have or have not yet merged into the branch you’re currently on. To see which branches are already merged into the branch you’re on, you can run <code>git branch --merged</code>, vice versa.</p>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Basics]]></title>
      <url>/2016/04/21/git-basics/</url>
      <content type="html"><![CDATA[<p>From this article you can get some basic usage of Git.</p>
<a id="more"></a>
<h2 id="Getting-a-Git-Repository"><a href="#Getting-a-Git-Repository" class="headerlink" title="Getting a Git Repository"></a>Getting a Git Repository</h2><h3 id="Initialize-a-Repository-and-Import-a-Project-to-Git"><a href="#Initialize-a-Repository-and-Import-a-Project-to-Git" class="headerlink" title="Initialize a Repository and Import a Project to Git"></a>Initialize a Repository and Import a Project to Git</h3><pre><code>$ cd [path_of_your_project]
$ git init
$ git add --all
$ git commit -m &quot;Initial commit&quot;
$ git remote add origin [url_of_your_remote_repository]
$ git push -u origin master
</code></pre><h3 id="Cloning-an-Existing-Repository"><a href="#Cloning-an-Existing-Repository" class="headerlink" title="Cloning an Existing Repository"></a>Cloning an Existing Repository</h3><pre><code>git clone [repository_url] [local_dir_name]
</code></pre><h2 id="Recording-Changes-to-the-Repository"><a href="#Recording-Changes-to-the-Repository" class="headerlink" title="Recording Changes to the Repository"></a>Recording Changes to the Repository</h2><p>As you edit files, the states of your files will change like below:</p>
<p><img src="/images/posts/git/lifecycle.png" alt="lifecycle.png"></p>
<h3 id="Checking-the-Status-of-Your-Files"><a href="#Checking-the-Status-of-Your-Files" class="headerlink" title="Checking the Status of Your Files"></a>Checking the Status of Your Files</h3><pre><code>$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
nothing to commit, working directory clean
</code></pre><h3 id="Add-a-New-File-to-Your-Project"><a href="#Add-a-New-File-to-Your-Project" class="headerlink" title="Add a New File to Your Project"></a>Add a New File to Your Project</h3><pre><code>$ echo &apos;READ ME&apos; &gt; README.md

$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
Untracked files:
    (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

        README.md

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre><h3 id="Tracking-New-Files"><a href="#Tracking-New-Files" class="headerlink" title="Tracking New Files"></a>Tracking New Files</h3><pre><code>$ git add README.md

$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
Changes to be committed:
    (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

    new file:   README.md
</code></pre><h3 id="Staging-Modified-Files"><a href="#Staging-Modified-Files" class="headerlink" title="Staging Modified Files"></a>Staging Modified Files</h3><p>Let’s say you modified a file already tracked which is named FAQ.md</p>
<pre><code>$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
Changes to be committed:
    (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

    new file:   README.md

Changes not staged for commit:
    (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
    (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

            modified:   FAQ.md

$ git add FAQ.md

$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
Changes to be committed:
    (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        new file:   README.md
        modified:   FAQ.md
</code></pre><p>If you modified FAQ.md again, FAQ would be listed as both staged and unstaged:</p>
<pre><code>$ git status

On branch master
Your branch is up-to-date with &apos;origin/master&apos;.
Changes to be committed:
    (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        new file:   README.md
        modified:   FAQ.md   
Changes not staged for commit:
    (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
    (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

    modified:   FAQ.md
</code></pre><p>Use <code>git diff</code> to compare what is in your working directory with what is in your staging area. The result tells you the changes you’ve made that you haven’t staged.</p>
<p>If you want to see what you’ve staged that will go into your next commit, you can use <code>git diff --staged</code>. This command compares you staged changes to your last commit.</p>
<h3 id="Committing-Your-Changes"><a href="#Committing-Your-Changes" class="headerlink" title="Committing Your Changes"></a>Committing Your Changes</h3><pre><code>$ git commit -m &quot;Some brief note of the change&quot;
</code></pre><p>You can add <code>-a</code> option to <code>git commit</code> command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the <code>git add</code> part.</p>
<h3 id="Removing-Files"><a href="#Removing-Files" class="headerlink" title="Removing Files"></a>Removing Files</h3><p><code>git rm</code> will remove a file from both your working directory and staging area. If you want to keep the file in your working directory but remove it from you staging area, use <code>git rm --cached</code></p>
<h3 id="Moving-Files"><a href="#Moving-Files" class="headerlink" title="Moving Files"></a>Moving Files</h3><p>If you want to rename a file use <code>git mv [file_from] [file_to]</code>. It is equivalent to running something like:</p>
<pre><code>$ git mv [file_from] [file_to]
$ git rm [file_from]
$ git add [file_to]
</code></pre><h2 id="Viewing-the-Commit-History"><a href="#Viewing-the-Commit-History" class="headerlink" title="Viewing the Commit History"></a>Viewing the Commit History</h2><p>View the commit history using <code>git log</code> in your project.</p>
<p>One helpful option is <code>-p</code>, which shows the difference introduced in each commit. You can also use <code>-2</code>, which limits the output to only the last two entries. </p>
<pre><code>$git log -p -2
</code></pre><p>If you want to see some abbreviated stats for each commit, you can use <code>--stat</code> option. Another really useful option is <code>--pretty</code>. If you are looking at a lot of commits, use <code>oneline</code> option prints each commit on a single line. Also <code>format</code> option allows you to specify your own log output format.</p>
<pre><code>$ git log --stat
$ git log --pretty=oneline
$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;
</code></pre><h3 id="Limiting-Log-Output"><a href="#Limiting-Log-Output" class="headerlink" title="Limiting Log Output"></a>Limiting Log Output</h3><p>Limit log by time-limiting options such a <code>--since</code> and <code>--until</code>, e.g.</p>
<pre><code>$ git log --since=2.weeks
</code></pre><p>You can also filter the commits by search criteria. </p>
<p>The <code>--author</code> option allows you to filter on a specific author .</p>
<p>And the <code>--grep</code> option lets you search for keywords in the commit messages. </p>
<p>Also you can add more than one options but you have to add –all-match or the command will match commits with either. Another really helpful filter is the <code>-S</code> option which takes a string and only shows the commits that introduced a change to the code that added or removed that string. An example with multiple options:</p>
<pre><code>$ git log --pretty=&quot;%h - %s&quot; --author=gitster --since=&quot;2008-10-01&quot; --before=&quot;2008-11-01&quot; --no-merges -- t/
</code></pre><h2 id="Undoing-Changes"><a href="#Undoing-Changes" class="headerlink" title="Undoing Changes"></a>Undoing Changes</h2><h3 id="Amend-a-commit"><a href="#Amend-a-commit" class="headerlink" title="Amend a commit"></a>Amend a commit</h3><p>You can run commit with <code>--amend</code> option</p>
<pre><code>$ git commit -m &quot;some unwanted commit&quot;
$ git add some_fix
$ git commit --amend
</code></pre><h3 id="Undoing-a-commit"><a href="#Undoing-a-commit" class="headerlink" title="Undoing a commit"></a>Undoing a commit</h3><pre><code>$ git reset [revision_before_your_commit]
</code></pre><h3 id="Unstaging-a-Staged-File"><a href="#Unstaging-a-Staged-File" class="headerlink" title="Unstaging a Staged File"></a>Unstaging a Staged File</h3><pre><code>$ git add --all
$ git reset HEAD some_unwanted_file
</code></pre><h3 id="Unmodifying-a-Modified-File"><a href="#Unmodifying-a-Modified-File" class="headerlink" title="Unmodifying a Modified File"></a>Unmodifying a Modified File</h3><pre><code>$ git checkout -- some_file_you_modified
</code></pre><h3 id="Removing-untracked-files"><a href="#Removing-untracked-files" class="headerlink" title="Removing untracked     files"></a>Removing untracked     files</h3><p>Check files to be removed, like “dry-run”:</p>
<pre><code>$ git clean -n
</code></pre><p>To actually remove the untracked files use:</p>
<pre><code>$ git clean -f
</code></pre><h2 id="Working-with-Remotes"><a href="#Working-with-Remotes" class="headerlink" title="Working with Remotes"></a>Working with Remotes</h2><h3 id="Showing-Your-Remotes"><a href="#Showing-Your-Remotes" class="headerlink" title="Showing Your Remotes"></a>Showing Your Remotes</h3><pre><code>$ git remote
$ git remote -v
</code></pre><h3 id="Adding-Remote-Repositories"><a href="#Adding-Remote-Repositories" class="headerlink" title="Adding Remote Repositories"></a>Adding Remote Repositories</h3><pre><code>$git remote add [url_of_remote_respository]
</code></pre><h3 id="Fetching-and-Pulling-from-Your-Remotes"><a href="#Fetching-and-Pulling-from-Your-Remotes" class="headerlink" title="Fetching and Pulling from Your Remotes"></a>Fetching and Pulling from Your Remotes</h3><pre><code>$ git fetch [remote-name]
$ git pull
</code></pre><h3 id="Pushing-to-Your-Remotes"><a href="#Pushing-to-Your-Remotes" class="headerlink" title="Pushing to Your Remotes"></a>Pushing to Your Remotes</h3><p>Use <code>git push [remote-name] [branch-name]</code> to push your commits to upstream, the command means you want to push your master branch to your origin server</p>
<pre><code>$ git push origin master
</code></pre><h3 id="Inspecting-a-Remote"><a href="#Inspecting-a-Remote" class="headerlink" title="Inspecting a Remote"></a>Inspecting a Remote</h3><p>If you want to see more information about a particular remote, you can use the <code>git remote show [remote-name]</code> command.</p>
<pre><code>$ git remote show origin
</code></pre><h3 id="Removing-and-Renaming-Remotes"><a href="#Removing-and-Renaming-Remotes" class="headerlink" title="Removing and Renaming Remotes"></a>Removing and Renaming Remotes</h3><pre><code>$ git remote rename [name_from] [name_to]
$ git remote rm [remote_name]
</code></pre><h2 id="Tagging"><a href="#Tagging" class="headerlink" title="Tagging"></a>Tagging</h2><h3 id="Listing-Your-Tags"><a href="#Listing-Your-Tags" class="headerlink" title="Listing Your Tags"></a>Listing Your Tags</h3><pre><code>$ git tag
</code></pre><p>You can also search for tags with a particular pattern:</p>
<pre><code>$ git tag -l &quot;v1.8.5*&quot;
</code></pre><h3 id="Creating-Tags"><a href="#Creating-Tags" class="headerlink" title="Creating Tags"></a>Creating Tags</h3><p>Git uses two main types of tags: lightweight and annotated. </p>
<p>A lightweight tag is very much like a branch that doesn’t change - it’s just a pointer to a specific commit.</p>
<p>A annotated tag is stored as full objects in the Git database. It is checksummed; contains the tagger name, email, and date; has a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). <strong>It is generally recommended that you create annotated tags so you can have all these information</strong>; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too.</p>
<h3 id="Annotated-Tags"><a href="#Annotated-Tags" class="headerlink" title="Annotated Tags"></a>Annotated Tags</h3><pre><code>$ git tag -a v1.4 -m &quot;my version 1.4&quot;
$ git show v1.4
</code></pre><h3 id="Lightweight-Tags"><a href="#Lightweight-Tags" class="headerlink" title="Lightweight Tags"></a>Lightweight Tags</h3><pre><code>$ git tag v1.4
$ git show v1.4
</code></pre><h3 id="Sharing-Tags"><a href="#Sharing-Tags" class="headerlink" title="Sharing Tags"></a>Sharing Tags</h3><p>By default, the <code>git push</code> command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. </p>
<pre><code>$ git push origin v1.4
$ git push origin --tags
</code></pre><h3 id="Checking-out-Tags"><a href="#Checking-out-Tags" class="headerlink" title="Checking out Tags"></a>Checking out Tags</h3><pre><code>$ git checkout -b [branch_name] [tag_name]
</code></pre><h2 id="Git-Aliases"><a href="#Git-Aliases" class="headerlink" title="Git Aliases"></a>Git Aliases</h2><pre><code>$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.unstage &apos;reset HEAD --&apos;
$ git config --global alias.last &apos;log -l HEAD&apos;
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[An Introduction to Git]]></title>
      <url>/2016/04/19/git-introduction/</url>
      <content type="html"><![CDATA[<p>Here is a brief introduction to Git quotes from <a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Pro Git</a></p>
<a id="more"></a>
<h2 id="What-is-Git"><a href="#What-is-Git" class="headerlink" title="What is Git"></a>What is Git</h2><p>Created in 2005, as a replacement of BitKeeper which is the previous VCS of project Linux kernel. Goals of Git:</p>
<ul>
<li>Speed</li>
<li>Simple design</li>
<li>Strong support for non-linear development</li>
<li>Fully distributed</li>
<li>Able to handle large projects like Linux kernel efficiently</li>
</ul>
<p>Git stores and thinks about information much differently than other VCSs.</p>
<h3 id="Snapshots-Not-differences"><a href="#Snapshots-Not-differences" class="headerlink" title="Snapshots, Not differences"></a>Snapshots, Not differences</h3><p>The major differences between Git and any other VCS is the way Git think about data. Other VCS stores data as changes to a base version of each file while Git thinks of its data more like a set of snapshots of a miniature file system.</p>
<p><strong><em>Storing data as changes to a base version of each file:</em></strong></p>
<p><img src="/images/posts/git/deltas.png" alt="deltas"></p>
<p><strong><em>Storing data as snapshots of the project over time:</em></strong></p>
<p><img src="/images/posts/git/snapshots.png" alt="snapshots"></p>
<h3 id="Nearly-Every-Operation-Is-Local"><a href="#Nearly-Every-Operation-Is-Local" class="headerlink" title="Nearly Every Operation Is Local"></a>Nearly Every Operation Is Local</h3><p>Most operations in Git only need local files and resources to operate - generally no information is needed from another computer on your network. Because you have entire history of the project on your local disk. You can even browse project history and do commit offline.</p>
<h3 id="The-Three-States"><a href="#The-Three-States" class="headerlink" title="The Three States"></a>The Three States</h3><p>Git has three main states that your files can reside in: <strong>committed</strong>, <strong>modified</strong> and <strong>staged</strong>.</p>
<ul>
<li><strong>Committed</strong> means that the data is safely stored in your local database</li>
<li><strong>Modified</strong> means you have changed the file but have not committed it to your database</li>
<li><strong>Staged</strong> means you have marked a modified file in its current version to go into your next commit snapshot</li>
</ul>
<p><img src="/images/posts/git/areas.png" alt="areas"></p>
<h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a><del>Install Git</del></h3><h3 id="First-time-Git-Setup"><a href="#First-time-Git-Setup" class="headerlink" title="First-time Git Setup"></a>First-time Git Setup</h3><p>Git comes with a tool called git config and lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:</p>
<ol>
<li><p><code>/etc/gitconfig</code> : contains values for all users. If you use <code>git config --system</code>, it reads and writes from this file specifically</p>
</li>
<li><p><code>~/.gitconfig</code> or <code>~/.config/git/config</code> : Specific to your user. You can use <code>git config --global</code> to read and write this file specifically</p>
</li>
<li><p><code>.git/config</code> in your repository: Specific to that single repository</p>
</li>
</ol>
<p><strong>Each level overrides values in the previous level</strong></p>
<h3 id="Your-Identify"><a href="#Your-Identify" class="headerlink" title="Your Identify"></a>Your Identify</h3><pre><code>$ git config --global user.name &quot;Kevin He&quot;
$ git config --global user.email kevin.he@citi.com
</code></pre><h3 id="Your-Editor"><a href="#Your-Editor" class="headerlink" title="Your Editor"></a>Your Editor</h3><pre><code>$ git config --global core.editor &quot;&apos;C:/Program Files (x86)/Notepad++/notepad++.exe&apos; -multiInst -nosession&quot;
</code></pre><h3 id="Checking-Your-Settings"><a href="#Checking-Your-Settings" class="headerlink" title="Checking Your Settings"></a>Checking Your Settings</h3><pre><code>$ git config --list
user.name=Kevin He
user.email=kevin.he@citi.com
</code></pre>]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Diagnose High CPU Java Process on Linux]]></title>
      <url>/2016/04/18/diagnose-high-cpu-java-process-on-linux/</url>
      <content type="html"><![CDATA[<p>If you are running into issue with java process with high CPU utilization, just do below simple steps to get some clue:</p>
<a id="more"></a>
<ol>
<li><p>Get the PID of the java process that has issue just by <code>top</code></p>
</li>
<li><p>Get TID of the threads in the process that consumes a lot of CPU time</p>
<p> <code>ps -Lf [PID]</code></p>
<p> or</p>
<p> <code>ps H -eo user,pid,ppid,tid,time,%cpu --sort=%cpu | grep [PID]</code></p>
</li>
<li><p>Get a thread dump by jstack</p>
<p> <code>jstack PID &gt; /var/tmp/thread_dump_[PID].txt</code></p>
</li>
<li><p>Convert the TID found in step 2 to NID (Oct to Hex)</p>
<p> <code>e.g. 9588 -&gt; 0x2574</code></p>
</li>
<li><p>Find the NID in the thread dump file and check the stack to see what the thread does</p>
<p><code>grep [NID] /var/tmp/thread_dump_[PID].txt</code> </p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Suppress Startup Sound on Mac OSX]]></title>
      <url>/2016/04/18/suppress-startup-sound-on-macosx/</url>
      <content type="html"><![CDATA[<p>Are you constantly scared by the startup sound when you start your Mac or feel awkward when the sound annoys people around you when you use your Mac in a public place? Here are two scripts that can save you - one mute the Mac when log out OSX and the other one unmute your Mac after you log in. </p>
<a id="more"></a>
<p>Here are the steps:</p>
<ul>
<li><p>Create the script to mute the Mac: <code>sudo nano /Library/Scripts/mute.sh</code></p>
<pre><code>#!/bin/bash

osascript -e &apos;set volume output muted 1&apos;
</code></pre></li>
<li><p>Create the script to unmute the Mac: <code>sudo nano /Library/Scripts/unmute.sh</code></p>
<pre><code>#!/bin/bash

osascript -e &apos;set volume output muted 0&apos;
</code></pre></li>
<li><p>Add execute permission to the scripts</p>
<p>  <code>sudo chmod u+x /Library/Scripts/mute.sh</code></p>
<p>  <code>sudo chmod u+x /Library/Scripts/umute.sh</code></p>
</li>
<li><p>Add the two scripts to login and logout hook respectively</p>
<p>  <code>sudo defaults write com.apple.loginwindow LogoutHook /Library/Scripts/mute.sh</code></p>
<p>  <code>sudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/unmute.sh</code></p>
</li>
<li><p>If you want to undo the changes</p>
<p>  <code>sudo defaults delete com.apple.loginwindow LoginHook</code></p>
<p>  <code>sudo defaults delete com.apple.loginwindow LogoutHook</code></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Barbecue in The Park]]></title>
      <url>/2016/04/17/barbecue-in-the-park/</url>
      <content type="html"><![CDATA[<p>We’ve successfully had a team building activity last weekend on 10th April.</p>
<a id="more"></a>
<p>Thanks for the efforts of our beloved team members:</p>
<ul>
<li>Yue</li>
<li>Shirui</li>
<li>Johnson</li>
<li>Qiana</li>
</ul>
<p>Everyone had a lot of fun that day!</p>
<p><img src="/images/posts/barbecue/1.pic.jpg" alt="pic 1"></p>
<p><img src="/images/posts/barbecue/2.pic.jpg" alt="pic 2"></p>
<p><img src="/images/posts/barbecue/3.pic.jpg" alt="pic 3"></p>
<p><img src="/images/posts/barbecue/4.pic.jpg" alt="pic 4"></p>
<p><img src="/images/posts/barbecue/5.pic.jpg" alt="pic 5"></p>
<p><img src="/images/posts/barbecue/6.pic.jpg" alt="pic 6"></p>
<p><img src="/images/posts/barbecue/7.pic.jpg" alt="pic 7"></p>
<p><img src="/images/posts/barbecue/8.pic.jpg" alt="pic 8"></p>
<p><img src="/images/posts/barbecue/9.pic.jpg" alt="pic 9"></p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[An Introduction to Markdown]]></title>
      <url>/2016/04/17/markdown-introduction/</url>
      <content type="html"><![CDATA[<p>An introduction to Markdown (Chinese version)</p>
<a id="more"></a>
<h1 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h1><hr>
<h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown"></a>什么是Markdown</h2><p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的<strong>轻量级</strong>的<strong><em>标记语言</em></strong>，通过类似HTML的标记语法，它可以使普通文本具有一定的格式。Markdown语法简洁明了，容易上手，而且比纯文本更强。</p>
<p><strong>Markdown</strong>的目标是实现<strong>易读易写</strong>，Markdown的语法由一些精挑细选的符号组成，其作用一目了然。常用的Markdown符号不超过10种，非常易于学习。</p>
<p><strong>Markdown</strong>语法的目标是成为一种<strong>适用于网络的书写语言</strong>。</p>
<p>由<strong>Markdown</strong>语法构成的普通文本可以通过<strong>Markdown</strong>的解释器转换为HTML文档，进而发布到网站或导出PDF文件。</p>
<p>Markdown的优点有：</p>
<ul>
<li>专注你的文字内容而不是排版样式，安心写作。</li>
<li>兼容HTML，自动转换特殊字符。</li>
<li>轻松的导出HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li>
<li>可读、直观、学习成本低。</li>
</ul>
<h2 id="Markdown的语法汇总"><a href="#Markdown的语法汇总" class="headerlink" title="Markdown的语法汇总"></a>Markdown的语法汇总</h2><h3 id="区块元素-Block-Elements"><a href="#区块元素-Block-Elements" class="headerlink" title="区块元素 (Block Elements)"></a>区块元素 (Block Elements)</h3><ul>
<li><a href="#headers">标题 (Headers)</a></li>
<li><a href="#paragraphs">段落 (Paragraphs And Line Breaks)</a></li>
<li><a href="#lists">列表 (Lists)</a></li>
<li><a href="#blockquotes">区块引用 (Blockquotes)</a></li>
<li><a href="#codeblocks">代码区块 (Code Blocks)</a></li>
<li><a href="#horizontalrules">分隔线 (Horizontal Rules)</a></li>
</ul>
<h3 id="区段元素-Span-Elements"><a href="#区段元素-Span-Elements" class="headerlink" title="区段元素 (Span Elements)"></a>区段元素 (Span Elements)</h3><ul>
<li><a href="#emphasis">强调 (Emphasis)</a></li>
<li><a href="#code">代码 (Code)</a></li>
<li><a href="#links">链接 (Links)</a></li>
<li><a href="#images">图片 (Images)</a></li>
</ul>
<h3 id="其他-（Miscellaneous"><a href="#其他-（Miscellaneous" class="headerlink" title="其他 （Miscellaneous)"></a>其他 （Miscellaneous)</h3><ul>
<li><a href="#automaticlinks">自动链接 (Automatic Links)</a></li>
<li><a href="#backslash">反斜杠 (Backslash Escapes)</a></li>
</ul>
<h2 id="Markdown的语法详解"><a href="#Markdown的语法详解" class="headerlink" title="Markdown的语法详解"></a>Markdown的语法详解</h2><h3 id="标题-Headers"><a href="#标题-Headers" class="headerlink" title="标题 (Headers)"></a><a name="headers"></a>标题 (Headers)</h3><p>在行首插入1到6个<code>#</code>，对应标题1到6阶，例如：</p>
<pre><code>### This is H3
#### This is H4
##### This is H5
###### This is H6
</code></pre><h3 id="This-is-H3"><a href="#This-is-H3" class="headerlink" title="This is H3"></a>This is H3</h3><h4 id="This-is-H4"><a href="#This-is-H4" class="headerlink" title="This is H4"></a>This is H4</h4><h5 id="This-is-H5"><a href="#This-is-H5" class="headerlink" title="This is H5"></a>This is H5</h5><h6 id="This-is-H6"><a href="#This-is-H6" class="headerlink" title="This is H6"></a>This is H6</h6><h3 id="段落和换行-（Paragraphs-And-Line-Breaks）"><a href="#段落和换行-（Paragraphs-And-Line-Breaks）" class="headerlink" title="段落和换行 （Paragraphs And Line Breaks）"></a><a name="paragraphs"></a>段落和换行 （Paragraphs And Line Breaks）</h3><p>一个Markdown段落是由一个或多个连续的文本组成，一个段落的前后要有一个或以上的空行。</p>
<p>在同一个段落内，Markdown允许段落内的强制换行，在需要换行的地方插入两个空格，然后回车。</p>
<pre><code>This is a paragraph,
within the paragraph, link break will simply ignored.
</code></pre><p>This is a paragraph,<br>within the paragraph, link break will simply ignored.</p>
<pre><code>This is a paragraph,  
within the paragraph, you can insert a line break by typing two spaces and a return.
</code></pre><p>This is a paragraph,<br>within the paragraph, you can insert a line break by typing two spaces and a return.</p>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 (Lists)"></a><a name="lists"></a>列表 (Lists)</h3><h4 id="无序列表-Unordered-Lists"><a href="#无序列表-Unordered-Lists" class="headerlink" title="无序列表 (Unordered Lists)"></a>无序列表 (Unordered Lists)</h4><p>无序列表使用星号、加号或减号作为列表标记：</p>
<pre><code>* Red
* Green
* Blue

+ Red
+ Green
+ Blue

- Red
- Green
- Blue
</code></pre><ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 (Ordered Lists)"></a>有序列表 (Ordered Lists)</h4><pre><code>1. First
2. Second
3. Third
</code></pre><ol>
<li>First</li>
<li>Second</li>
<li>Third</li>
</ol>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title=" 区块引用 (Blockquotes)"></a><a name="blockquotes"></a> 区块引用 (Blockquotes)</h3><p>Markdown使用<code>&gt;</code>建立一个区块引用，如果要把一个段落所有内容作为一个区块引用，你可以在这个段落的每一行最前面加上<code>&gt;</code>或者在整个段落的第一行最前面加上<code>&gt;</code>：</p>
<pre><code>&gt; This is a blockquote
</code></pre><blockquote>
<p>This is a blockquote</p>
</blockquote>
<p>区块引用可以嵌套，也可以在区块内使用其他的Markdown语法：</p>
<pre><code>&gt; ### This is a header
&gt; This is the **first level** of quoting
&gt;
&gt;&gt; This is the second level of quoting
&gt;
&gt; Back to the first level
</code></pre><blockquote>
<h3 id="This-is-a-header"><a href="#This-is-a-header" class="headerlink" title="This is a header"></a>This is a header</h3><p>This is the first level of quoting</p>
<blockquote>
<p>This is the second level of quoting</p>
</blockquote>
<p>Back to the first level</p>
</blockquote>
<h3 id="代码区块-Code-Blocks"><a href="#代码区块-Code-Blocks" class="headerlink" title=" 代码区块 (Code Blocks)"></a><a name="codeblocks"></a> 代码区块 (Code Blocks)</h3><p>在Markdown中建立代码区块只要简单的锁进4个空格或1个制表符即可：</p>
<pre><code>This is a code block
</code></pre><p>代码区块会一直持续到没有缩进的那一行，代码区块中，一般的Markdown语法不会被转换，像<code>#</code>会直接显示成警号而不会被转换成标题，而<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>会自动转换为HTML实体，不需要特意去转译：</p>
<pre><code># Below is HTML syntax
&lt;html&gt;
    &lt;table&gt;&lt;/table&gt;
&lt;/html&gt;
</code></pre><h3 id="分隔线-Horizontal-Rules"><a href="#分隔线-Horizontal-Rules" class="headerlink" title=" 分隔线 (Horizontal Rules)"></a><a name="horizontalrules"></a> 分隔线 (Horizontal Rules)</h3><p>你可以在一行中使用3个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或减号中间插入空格：</p>
<pre><code>***

* * *

---

- - -

___

_ _ _
</code></pre><hr>
<h3 id="强调-Emphasis"><a href="#强调-Emphasis" class="headerlink" title=" 强调 (Emphasis)"></a><a name="emphasis"></a> 强调 (Emphasis)</h3><p>Markdown使用<code>*</code>或<code>_</code>作为强调字词的符号，被一个<code>*</code>或<code>_</code>包围的字词会被转换成斜体 (Italic)，被两个<code>*</code>或<code>_</code>包围的字词显示为粗体 (Bold)：</p>
<pre><code>＊single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<p>注意如果你的<code>*</code>或<code>_</code>两边有空白的话，它们就只会被当成普通符号：</p>
<pre><code>There is a space after asterisks * strong *
</code></pre><p>There is a space after asterisks <strong> strong </strong></p>
<h3 id="代码-Code"><a href="#代码-Code" class="headerlink" title=" 代码 (Code)"></a><a name="code"></a> 代码 (Code)</h3><p>如果要标记一小段行内代码，你可以用<code>` </code>把它包围起来：</p>
<pre><code>｀int a = 10`
</code></pre><p><code>int a = 10</code></p>
<p>如果你的代码里本身就有反引号，你可以用多个反引号来包围你的代码：</p>
<pre><code>``This is a literal backtick (`) here``
</code></pre><p><code>This is a literal backtick (`) here</code></p>
<h3 id="链接-（Links）"><a href="#链接-（Links）" class="headerlink" title=" 链接 （Links）"></a><a name="links"></a> 链接 （Links）</h3><p>Markdown支持两种链接语法：<em>行内式</em>和<em>参考式</em>：</p>
<pre><code>This is in line link: [Google](http://www.google.com)

This is reference-style link: [Google][id]

[id]: http://www.google.com
</code></pre><p>This is in line link: <a href="http://www.google.com" target="_blank" rel="external">Google</a></p>
<p>This is reference-style link: <a href="http://www.google.com" target="_blank" rel="external">Google</a></p>
<p><em>隐式链接标记</em>功能让你可以省略指定链接标记：</p>
<pre><code>[Google][]

[Google]: http://www.google.com
</code></pre><p><a href="http://www.google.com" target="_blank" rel="external">Google</a></p>
<p>链接的定义可以放在文件中的任何地方，偏好直接放在链接出现的段落后面，也可以把它放在文件的最后面，就像是注解一样。</p>
<h3 id="图片-（Images"><a href="#图片-（Images" class="headerlink" title=" 图片 （Images)"></a><a name="images"></a> 图片 （Images)</h3><p>Markdown使用一种和链接很相似的语法来标记图片，在前面加一个惊叹号<code>!</code></p>
<pre><code>![Alt text](http://ico.ooopic.com/ajax/iconpng/?id=109229.png）
![Alt text][id]
[id]: http://ico.ooopic.com/ajax/iconpng/?id=109229.png
</code></pre><p><img src="http://ico.ooopic.com/ajax/iconpng/?id=109229.png" alt="Alt text"></p>
<h3 id="自动链接-（Automatic-Links）"><a href="#自动链接-（Automatic-Links）" class="headerlink" title=" 自动链接 （Automatic Links）"></a><a name="automaticlinks"></a> 自动链接 （Automatic Links）</h3><p>Markdown支持以比较简短的自动链接的方式来处理网址和电子邮件地址，只要尖括号包起来Markdown就会自动把它转成链接：</p>
<pre><code>&lt;http://tpscash.github.io&gt;
&lt;tpscash@outlook.com&gt;
</code></pre><p><a href="http://tpscash.github.io">http://tpscash.github.io</a></p>
<p><a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x74;&#112;&#x73;&#99;&#x61;&#115;&#104;&#64;&#111;&#117;&#116;&#x6c;&#x6f;&#x6f;&#107;&#x2e;&#99;&#111;&#109;">&#x74;&#112;&#x73;&#99;&#x61;&#115;&#104;&#64;&#111;&#117;&#116;&#x6c;&#x6f;&#x6f;&#107;&#x2e;&#99;&#111;&#109;</a></p>
<h3 id="反斜杠-（Backslash-Escapes）"><a href="#反斜杠-（Backslash-Escapes）" class="headerlink" title=" 反斜杠 （Backslash Escapes）"></a><a name="backslash"></a> 反斜杠 （Backslash Escapes）</h3><p>Markdown可以利用<code>\</code>来插入一些在Markdown语法中有特殊意义的符号，例如你想在一些文字前后加上星号，而不是想加入强调效果：</p>
<pre><code>\*literal asterisks\*
</code></pre><p>*literal asterisks*</p>
<p>Markdown支持以下这些符号前面加上反斜杠来插入为普通符号：</p>
<pre><code>\  反斜杠
`  反引号
*  星号
_  底线
{} 大括号
[] 方括号
() 小括号
#  井号
+  加号
-  减号
.  英文句点
!  惊叹号
</code></pre><h2 id="GitHub-Flavored-Markdown"><a href="#GitHub-Flavored-Markdown" class="headerlink" title="GitHub Flavored Markdown"></a>GitHub Flavored Markdown</h2><h3 id="语法高亮-Syntax-Highlighting"><a href="#语法高亮-Syntax-Highlighting" class="headerlink" title="语法高亮 (Syntax Highlighting)"></a>语法高亮 (Syntax Highlighting)</h3><p>使用以下语法来高亮代码：</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"str"</span>);</div></pre></td></tr></table></figure>
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"str"</span>);</div></pre></td></tr></table></figure>
<h3 id="任务列表-Task-Lists"><a href="#任务列表-Task-Lists" class="headerlink" title="任务列表 (Task Lists)"></a>任务列表 (Task Lists)</h3><pre><code>- [x] This is a complete item
- [ ] This is a incomplete item
</code></pre><ul>
<li>[x] This is a complete item</li>
<li>[ ] This is a incomplete item</li>
</ul>
<h3 id="表格-Tables"><a href="#表格-Tables" class="headerlink" title="表格 (Tables)"></a>表格 (Tables)</h3><table>
<thead>
<tr>
<th>col 1</th>
<th>col 2</th>
<th>col 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
</tbody>
</table>
<h3 id="横划线-Strikethrough"><a href="#横划线-Strikethrough" class="headerlink" title="横划线 (Strikethrough)"></a>横划线 (Strikethrough)</h3><pre><code>~~This is a strikthrough~~
</code></pre><p><del>This is a strikethrough</del></p>
<h2 id="支持Markdown的编辑器"><a href="#支持Markdown的编辑器" class="headerlink" title="支持Markdown的编辑器"></a>支持Markdown的编辑器</h2><h3 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h3><ul>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="external">Dillinger</a></li>
</ul>
<h3 id="本地编辑器"><a href="#本地编辑器" class="headerlink" title="本地编辑器"></a>本地编辑器</h3><ul>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown for OSX</a></li>
<li><a href="https://markdownpad.com" target="_blank" rel="external">MarkDownPad for Windows</a></li>
<li>MarkdownX for Andriod</li>
<li>ByWord for IOS</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technologies </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to TPS Cash Team Blog!]]></title>
      <url>/2016/04/16/welcome-to-tps-cash/</url>
      <content type="html"><![CDATA[<p><strong>Welcome to TPS Cash team blog!</strong></p>
<p>Here is a fancy place for TPS Cash team to share ideas, collaborate with each other, record inspirations etc.</p>
<p>Please stay tuned!</p>
<a id="more"></a>
<p>To write a blog in this place, you need to know:</p>
<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/#intro" target="_blank" rel="external">Markdown</a></li>
<li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
<li><a href="http://jekyllcn.com/" target="_blank" rel="external">Jekyll (Optional)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> home </category>
            
        </categories>
        
        
        <tags>
            
            <tag> home </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
